/***************************************************************************************/
/*! \file APBUberPostProcessGatherPixelShader.usf
*
* \brief Pixel shader for gathering the combined depth of field and bloom samples for blurring.
*
* This is basically a newer version of Epic's DOFAndBloomGatherPixelShader.usf (slightly modified).
*
* \b NOW_OWNER: SJT    28/7/2010 <BR>
*
* (c) 2010 Realtime Worlds Ltd.
****************************************************************************************/

#include "Common.usf"

/** The amount bloomed colors are scaled by. */
half2 BloomScaleAndThreshold;

// half resolution with depth DeviceZ in alpha
sampler2D SmallSceneColorTexture;

/** Computes a pixel's luminance for bloom */
half ComputeLuminanceForBloom( half3 InSceneColor )
{
	// Compute the luminance for this pixel
	half TotalLuminance;
	if( 1 )
	{
		// Compute luminance as the maximum of RGB.  This is a bit more intuitive for artists as they know
		// that any pixel with either of the RGB channels above 1.0 will begin to bloom.
		TotalLuminance = max( InSceneColor.r, max( InSceneColor.g, InSceneColor.b ) );
	}
	else
	{
		// RGB scale factor to calculated pixel luminance using a weight average
		half3 LuminanceFactor = half3( 0.3, 0.59, 0.11 );

		// Compute true luminance
		TotalLuminance = dot( LuminanceFactor, InSceneColor );
	}

	return TotalLuminance;
}



/** Computes bloomed amount for the specified scene color */
half ComputeBloomAmount( half3 InSceneColor, half InLuminance )
{
	// Size of the bloom "ramp".  This value specifies the amount of light beyond the bloom threshold required
	// before a pixel's bloom will be 100% of the original color.
	// NOTE: Any value above 0.8 looks pretty good here (and 1.0 is often fastest), but a value of 2.0 here
	//	     minimizes artifacts: the bloom ramp-up will closely match the linear ascent of additive color
	half BloomRampSize = 2.0f;

	// Figure out how much luminance is beyond the bloom threshold.  Note that this value could be negative but
	// we handle that in the next step.
	half BloomLuminance = InLuminance - BloomScaleAndThreshold.y;

	// Note that we clamp the bloom amount between 0.0 and 1.0, but pixels beyond our bloom ramp will still 
	// bloom brighter because we'll use 100% of the original scene color as bloom
	half BloomAmount = saturate( BloomLuminance / BloomRampSize );
	
	return BloomAmount;
}



/** Computes bloomed amount for the specified scene color */
half ComputeBloomAmount( half3 InSceneColor )
{
	// Compute the luminance for this pixel
	half TotalLuminance = ComputeLuminanceForBloom( InSceneColor );

	return ComputeBloomAmount( InSceneColor, TotalLuminance );
}



/** Computes bloomed color for the specified scene color */
half3 ComputeBloomColor( half3 InSceneColor, half InLuminance )
{
	// Multiply with the scene color to get the final bloom amount
	return InSceneColor * ComputeBloomAmount( InSceneColor, InLuminance );
}


/** Computes bloomed color for the specified scene color */
half3 ComputeBloomColor( half3 InSceneColor )
{
	// Multiply with the scene color to get the final bloom amount
	return InSceneColor * ComputeBloomAmount( InSceneColor );
}


#include "DepthOfFieldCommon.usf"

/** The number of float4s the 2D sample offsets are packed into. */
#define NUM_CHUNKS ((NUM_SAMPLES + 1) / 2)

/**
 * Combines bloom color and weighted unfocused DOF color, with unfocused percent in alpha.
 */
half4 ComputeWeightedSample(half3 BloomColor, half3 SceneColor, half SceneDepth )
{
#if GATHER_BLOOM

	// Don't care about alpha for bloom-only.
	half4 Result = half4(BloomColor, 1.0f);

	#if GATHER_DOF
		// Combined DoF/bloom:
		// Write weighted scene colour + bloom color, with unfocused percent in alpha.
		half UnfocusedPercent = CalcUnfocusedPercent(SceneDepth);

		// The unfocused color is the scene color scaled by the unfocused percent.
		Result.rgb += UnfocusedPercent * SceneColor;
		Result.a = UnfocusedPercent;
	#endif

	return Result;

#elif GATHER_DOF

	// DOF-only path.
	// Write out untouched scene colour and *foreground* circle-of-confusion in alpha.
	half ForegroundCoC = CalcForegroundUnfocusedPercent(SceneDepth);
	return half4(SceneColor, ForegroundCoC);

#else
	// Must be one or the other, so this path will error (must return a value).
#endif
}

// RGB is half resolution scene color, A is depth
half4 CalcSceneColorAndDepthDOFBloomInput(float2 ScreenUV)
{
	// scene color and depth lookup in half resolution
	half4 FetchColor = tex2D(SmallSceneColorTexture, ScreenUV);

	// bring from texture usable range to worldspace range
	FetchColor.a /= ALPHA_DEPTH_SCALE_FACTOR;

	return FetchColor;
}

void AccumulateAverages(float2 UV, inout half4 AvgSceneColorAndDepth, inout half3 AvgBloomColor)
{
	// Sample scene color/depth and accumulate average
	half4 SceneColorAndDepth = CalcSceneColorAndDepthDOFBloomInput(UV);
	AvgSceneColorAndDepth += SceneColorAndDepth;

// This should be optimised out anyway, but #if'ing it eases my mind.
#if GATHER_BLOOM
	// Compute bloom amount and accumulate average
	AvgBloomColor += ComputeBloomColor(SceneColorAndDepth.rgb);
#endif
}

/**
 * Shared code for the gather pass, which downsamples from scene color to the filter buffer. 
 */
void Main(
	in float4 OffsetUVs[NUM_CHUNKS] : TEXCOORD0,
	out float4 OutColor : COLOR0
	)
{
	half3 AvgBloomColor = 0; 
	half4 AvgSceneColorAndDepth = 0;

	// Go through each chunk and take samples.
	UNROLL
	for (int ChunkIndex = 0; ChunkIndex < NUM_SAMPLES / 2; ChunkIndex++)
	{
		// Accumulate scene colour/depth and bloom colour for each sample in the chunk.
		AccumulateAverages(OffsetUVs[ChunkIndex].xy, AvgSceneColorAndDepth, AvgBloomColor);
		AccumulateAverages(OffsetUVs[ChunkIndex].wz, AvgSceneColorAndDepth, AvgBloomColor);
	}
	if (NUM_SAMPLES % 2 == 1)
	{
		// Get the last sample, if it's an odd number.
		AccumulateAverages(OffsetUVs[NUM_SAMPLES / 2].xy, AvgSceneColorAndDepth, AvgBloomColor);
	}

	//normalize and scale
	AvgBloomColor = AvgBloomColor * BloomScaleAndThreshold.x / NUM_SAMPLES;
	AvgSceneColorAndDepth = AvgSceneColorAndDepth / NUM_SAMPLES;

	// DOF and Bloom
	//combine weighted DOF color with bloom color
	//scale output down to fit in the [0-1] range of the fixed point filter buffer
	OutColor = ComputeWeightedSample(AvgBloomColor, AvgSceneColorAndDepth.rgb, AvgSceneColorAndDepth.a) / MAX_SCENE_COLOR;

#if PS3
	OutColor = isnan(OutColor) ? half4(0,0,0,0) : OutColor;
#endif

	// HACK: Since we now use a floating point filter buffer, it can contain NaNs and Infs
	// that cause artefacts. Ideally we'd not put them into the frame buffer in the first place,
	// but it would probably be a lot of work to resolve that now, so we clamp
	// to [0,1] to replicate the previous behaviour when the filter buffer was fixed-point (remember that
	// we've already scaled by MAX_SCENE_COLOR).
	OutColor = saturate(OutColor);
}
