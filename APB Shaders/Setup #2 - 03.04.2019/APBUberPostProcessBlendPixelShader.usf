/***************************************************************************************/
/*! \file APBUberPostProcessBlendPixelShader.usf
*
* \brief Pixel shader for blending the blurred bloom colors with the scene color.
* Also performs tone mapping.
*
* \b NOW_OWNER: SJT           03/11/2008 <BR>
* \b WAS_OWNER: Hugh Malan    20/02/2008 <BR>
*
* (c) 2008 Realtime Worlds Ltd.
****************************************************************************************/

#include "Common.usf"
#include "PostProcessCommon.usf"
#include "DepthOfFieldCommon.usf"
#include "_Settings.usf" // Custom settings file

sampler2D BlurredImage;

#if SEPARATE_BLOOM
sampler2D BlurredImageSeperateBloom;
#endif
#if RTW_ON
	#define SEPARATE_BLOOM 0
	#define SET_BLOOM_KYOUKI 0
#endif
// Tone-mapping parameters.
sampler2D AdaptedLuminance;
float MiddleGrey;
float Lwhite;

// Colour adjustment parameters.
float Brightness;
float Contrast;
float Saturation;
float3 DesaturatedColour;

#if USE_COLORGRADING
sampler2D ColorGradingLUT;
#endif // USE_COLORGRADING

// The per-color weighting to be used for luminance calculations in RGB order.
#if RTW_ON
	static const half3 LuminanceVector = LUMINANCE_V_RTW;
#else
	static const half3 LuminanceVector = LUMINANCE_V;
#endif



// Calculate DOF and bloom for the pixel.
float3 ApplyDOFAndBloom(half4 FocusedSceneColorAndDepth, float2 UV)
{
#if SEPARATE_BLOOM
	#if SET_BLOOM_KYOUKI
		half4 DOFColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage,UV);
		half CoC = 0.0; //CalcBackgroundUnfocusedPercent(FocusedSceneColorAndDepth.a) * 0.0;	
		half3 Result = lerp(FocusedSceneColorAndDepth.rgb, DOFColorAndWeight.rgb, CoC);		
	#else
		// Sample DoF colour and blurred foreground circle of confusion.
		half4 DOFColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage,UV);
		half UnblurredForegroundCoC = CalcForegroundUnfocusedPercent(FocusedSceneColorAndDepth.a);
		half BlurredForegroundCoC = DOFColorAndWeight.a;
		// Combine blurred and unblurred CoC to get max area CoC.
		half ForegroundCoC = saturate(2 * max(UnblurredForegroundCoC, BlurredForegroundCoC) - UnblurredForegroundCoC);
		// Combine foreground and background.
		half CoC = max(ForegroundCoC, CalcBackgroundUnfocusedPercent(FocusedSceneColorAndDepth.a));
		// Lerp between blurred and unblurred based on CoC.
		half3 Result = lerp(FocusedSceneColorAndDepth.rgb, DOFColorAndWeight.rgb, CoC);
		// Add in bloom contribution.
	#endif
	Result += MAX_SCENE_COLOR * tex2D(BlurredImageSeperateBloom, UV).rgb;
	return Result;
#else
	// RTW SWITCH with separate bloom off
	#if RTW_ON
		float4 rawColor = tex2D(BlurredImage,UV);
		float3 filteredColor = MAX_SCENE_COLOR * rawColor.rgb * 0.5f;//rawColor.rgb;// for testing setted to 1.0f // tex2D(BlurredImage, UV);
		float3 BloomResult = 1-(saturate(1-(filteredColor.rgb))*saturate(1-lerp(FocusedSceneColorAndDepth.rgb, 0, saturate(rawColor.a))));
	#else
		half FocusedWeight = saturate(1 - CalcUnfocusedPercent(FocusedSceneColorAndDepth.a));
		//Scale color back up as it was compressed to the [0-1] range to fit in the fixed point filter buffer
		half4 UnfocusedSceneColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage, UV);
		half  WeightSum = max(FocusedWeight + saturate(UnfocusedSceneColorAndWeight.a), 0.001);
		float3 BloomResult = (FocusedSceneColorAndDepth.rgb * FocusedWeight + UnfocusedSceneColorAndWeight.rgb) / WeightSum;
	#endif
	return BloomResult;
#endif
}

// SJT: Perform tone mapping on a pixel.
half3 ToneMap(float3 WorldColour)
{
	#if RTW_ON
		float fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
		float Lworld = dot(WorldColour, LuminanceVector); // Luminance
		float Exposure = MiddleGrey / (fAdaptedLuminance + 3.5f);
		float Ladapted = Lworld = Exposure;
		float Ldisplay = (Ladapted * (1.0 + Ladapted / (Lwhite * Lwhite))) / (-0.55f + Ladapted);
		return WorldColour * Ldisplay / (Lworld - 0.35);
	#else 
		#if DOPE_ON
			float fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
			float Lworld = dot(WorldColour, LuminanceVector);
			float Exposure = MiddleGrey / (fAdaptedLuminance + 0.2f);
			float Ladapted = Lworld * Exposure;
			float Ldisplay = (Ladapted * (1.4 + Ladapted / (Lwhite * Lwhite))) / (1.0f + Ladapted);
			return WorldColour * Ldisplay / (Lworld + 0.0016);
		#else
			half fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
			half Lworld = dot(WorldColour, LuminanceVector);
			half Exposure = MiddleGrey / (fAdaptedLuminance + 0.001f);
			half Ladapted = Lworld * Exposure;
			half Ldisplay = (Ladapted * (1 + Ladapted / (Lwhite * Lwhite))) / (1.0f + Ladapted);
			return WorldColour * Ldisplay / (Lworld + 0.0001);
		#endif
	#endif
}

// SJT: Basic colour adjustment.
half3 ColourAdjust(half3 InColour)
{
	half3 Result = InColour;

	// Saturate before we do anything to prevent whackiness from values outside [0,1]
	Result = saturate(Result);

	// (De)saturate.
	Result = lerp(dot(Result, LuminanceVector) * DesaturatedColour, Result, Saturation);

	// Contrast adjustment (cubic).
	Result = Result - Contrast * (Result - 1) * Result * (Result - 0.5);

	// Brightness adjustment (addition).
	Result = Result + Brightness;

	return Result;
}

void Main(
	in float2 UV : TEXCOORD0,
	in float2 SceneUV : TEXCOORD1,
	out float4 OutColor : COLOR0
	)
{
	half4 FocusedSceneColorAndDepth = CalcSceneColorAndDepth(SceneUV);

	// Apply depth of field and bloom.
	float3 DOFBloomResult = ApplyDOFAndBloom(FocusedSceneColorAndDepth, UV);

	// SJT: Tone map the HDR colour.
	half3 ToneMappedColour = ToneMap(DOFBloomResult);

#if USE_COLORGRADING
	half3 AdjustedColour = ColorLookupTable(ColorGradingLUT, ToneMappedColour);
#else
	// SJT: Perform colour adjustment.
	half3 AdjustedColour = ColourAdjust(ToneMappedColour);
#endif // USE_COLORGRADING

	// Gamma correction.
	// DISABLED: This wasn't used when the UI is shown (i.e. most of the time!),
	// and costs a big chunk of time, so I've disabled it.
	//half3 LinearColor = AdjustedColour * GammaColorScale + GammaOverlayColor;
	//OutColor = float4(pow(saturate(LinearColor), GammaInverse), FocusedSceneColorAndDepth.a);
	OutColor = float4(AdjustedColour, FocusedSceneColorAndDepth.a);
	
	// custom lines	
	#if SET_CROSSHAIR
		#include "Crosshair.usf"
	#else
	#endif
	
	#if SET_OUTLINE
		#include "OutlinePixelShader.usf"
	#else
	#endif
	
}