/*=============================================================================
	FoliageVertexFactory.usf: Foliage vertex factory shader code.
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

float4 ShadowCoordinateScaleBias;

#if XBOX
/** One over the number of vertices per foliage instance. */
float InvNumVerticesPerInstance;

/** The number of vertices per foliage instance. */
float NumVerticesPerInstance;
#endif

struct FVertexFactoryInput
{
#if XBOX

	int		VertexIndex : INDEX;

#else

	float4	Position	: POSITION;
	half3	TangentX	: TANGENT;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ	: NORMAL;

#if NUM_MATERIAL_TEXCOORDS
	float2	TexCoord : TEXCOORD0;
#endif

	float3	InstanceOffset : TEXCOORD1;
	float3	InstanceXAxis : TEXCOORD2;
	float3	InstanceYAxis : TEXCOORD3;
	float3	InstanceZAxis : TEXCOORD4;

#if NEEDS_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
	float4 LightMapB : TEXCOORD6;
	float4 LightMapC : TEXCOORD7;
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
// APB(SJT) +
	float3 NightFactor : TEXCOORD6;
// APB(SJT) -
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	float2	LightMapCoordinate : COLOR;
#endif

// APB(SJT): Per-vertex AO support. +
#if VERTEX_AOMAP
	float2 AOAndShadowMap : BLENDWEIGHT0;
#endif
// APB(SJT) -

#endif
};

struct FInstancedVertexFactoryInput
{
	float4	Position	: POSITION;
	half3	TangentX	: TANGENT;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ	: NORMAL;

#if NUM_MATERIAL_TEXCOORDS
	float2	TexCoord : TEXCOORD0;
#endif

	float3	InstanceOffset : TEXCOORD1;
	float3	InstanceXAxis : TEXCOORD2;
	float3	InstanceYAxis : TEXCOORD3;
	float3	InstanceZAxis : TEXCOORD4;

#if NEEDS_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
	float4 LightMapB : TEXCOORD6;
	float4 LightMapC : TEXCOORD7;
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
// APB(SJT) +
	float3 NightFactor : TEXCOORD6;
// APB(SJT) -
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	float2	LightMapCoordinate : COLOR;
#endif

// APB(SJT): Per-vertex AO support. +
#if VERTEX_AOMAP
	float2 AOAndShadowMap : BLENDWEIGHT0;
#endif
// APB(SJT) -
};

struct FVertexFactoryInterpolants
{
#if WORLD_COORDS
// APB(SJT) MODIFIED: Pack per-vertex AO into the w coordinate. +
	// First row of the tangent to world matrix
	float4	TangentToWorld0_VertexAO	: COLOR0;
	// Last row of the tangent to world matrix in xyz
	float4	TangentToWorld2	: COLOR1;
#else
	#if VERTEX_AOMAP
		// Per-vertex AO.
		float VertexAO : COLOR1;
	#endif
// APB(SJT) -
#endif
#if NEEDS_LIGHTMAP_COORDINATE
	float2	LightMapCoordinate	: TEXCOORD0;
#if NUM_MATERIAL_TEXCOORDS
	float2	TexCoord	: TEXCOORD1;
#endif
#else
#if NUM_MATERIAL_TEXCOORDS
	float2	TexCoord	: TEXCOORD0;
#endif
#endif

#if !COMPILER_SUPPORTS_EMPTY_STRUCTS && !WORLD_COORDS && !NEEDS_LIGHTMAP_COORDINATE && !NUM_MATERIAL_TEXCOORDS
	float4 Dummy : TEXCOORD0;
#endif
};

FMaterialParameters GetMaterialParameters(FVertexFactoryInterpolants Interpolants)
{
	FMaterialParameters	Result;
#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex += 2)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.TexCoord;
		if(CoordinateIndex + 1 < NUM_MATERIAL_TEXCOORDS)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoord;
		}
	}
#endif
	Result.VertexColor = 1;
	Result.TangentNormal = 0;
	Result.TangentCameraVector = 0;
	Result.TangentReflectionVector = 0;
	Result.ScreenPosition = 0;
	Result.TangentLightVector = 0;
#if WORLD_COORDS
// APB(SJT) MODIFIED: Take .xyz since vertex AO is packed into the w coord. +
	Result.TangentToWorld = CalcTangentToWorld(Interpolants.TangentToWorld0_VertexAO.xyz,Interpolants.TangentToWorld2);
// APB(SJT) -
#endif
	return Result;
}

#if NEEDS_LIGHTMAP_COORDINATE
float2 GetLightMapCoordinate(FVertexFactoryInterpolants Interpolants)
{
	return Interpolants.LightMapCoordinate;
}

// APB(SJT) +
// Get second lightmap coordinate set. Dummy implementation.
float2 GetLightMap2Coordinate(FVertexFactoryInterpolants Interpolants)
{
	return float2(0,0);
}

// ADDED SJT: Get the ambient occlusion map coords. Dummy implementation.
float2 GetAOCoordinate(FVertexFactoryInterpolants Interpolants)
{
	return float2(0,0);
}
// APB(SJT) -
#endif

// APB(SJT) +
// ADDED SJT: Get per-vertex ambient occlusion. Dummy implementation.
float GetVertexAO(FVertexFactoryInterpolants Interpolants)
{
#if VERTEX_AOMAP
	#if WORLD_COORDS
		return Interpolants.TangentToWorld0_VertexAO.w;
	#else
		return Interpolants.VertexAO;
	#endif
#else
	return 1;
#endif
}
// APB(SJT) -


FInstancedVertexFactoryInput GetInstancedVertexFactoryInput(FVertexFactoryInput Input)
{
	FInstancedVertexFactoryInput Result;

#if XBOX

	// Add 0.5 to the vertex index to avoid rounding errors.
	int InstanceIndex = (Input.VertexIndex + 0.5) * InvNumVerticesPerInstance;
	int VertexIndex = Input.VertexIndex - NumVerticesPerInstance * InstanceIndex;

	float4 Position;
	float4 TangentX;
	float4 TangentZ;
	float4 InstanceXAxis;
	float4 InstanceYAxis;
	float4 InstanceZAxis;
	float4 InstanceOffset;
	asm
	{
		vfetch Position, VertexIndex, position
		vfetch TangentX, VertexIndex, tangent
		vfetch TangentZ, VertexIndex, normal
		vfetch InstanceOffset, InstanceIndex, texcoord1
		vfetch InstanceXAxis, InstanceIndex, texcoord2
		vfetch InstanceYAxis, InstanceIndex, texcoord3
		vfetch InstanceZAxis, InstanceIndex, texcoord4
	};
	Result.Position = Position;
	Result.TangentX = TangentX.xyz;
	Result.TangentZ = TangentZ;
	Result.InstanceOffset = InstanceOffset.xyz;
	Result.InstanceXAxis = InstanceXAxis.xyz;
	Result.InstanceYAxis = InstanceYAxis.xyz;
	Result.InstanceZAxis = InstanceZAxis.xyz;
	
#if NUM_MATERIAL_TEXCOORDS
	float4 TexCoord;
	asm
	{
		vfetch TexCoord, VertexIndex, texcoord0
	};
	Result.TexCoord = TexCoord.xy;
#endif

#if NEEDS_VERTEX_LIGHTMAP
	float4 LightMapA;
	float4 LightMapB;
	float4 LightMapC;
	asm
	{
		vfetch LightMapA, InstanceIndex, texcoord5
		vfetch LightMapB, InstanceIndex, texcoord6
		vfetch LightMapC, InstanceIndex, texcoord7
	};
	Result.LightMapA = LightMapA;
	Result.LightMapB = LightMapB;
	Result.LightMapC = LightMapC;
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
	float4 LightMapA;
	asm
	{
		vfetch LightMapA, InstanceIndex, texcoord5
	};
	Result.LightMapA = LightMapA;
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	float4	LightMapCoordinate;
	asm
	{
		vfetch LightMapCoordinate, InstanceIndex, color
	};
	Result.LightMapCoordinate = LightMapCoordinate.xy;
#endif

#else
	
	Result.Position = Input.Position;
	Result.TangentX = Input.TangentX;
	Result.TangentZ = Input.TangentZ;
	Result.InstanceXAxis = Input.InstanceXAxis;
	Result.InstanceYAxis = Input.InstanceYAxis;
	Result.InstanceZAxis = Input.InstanceZAxis;
	Result.InstanceOffset = Input.InstanceOffset;
#if NUM_MATERIAL_TEXCOORDS
	Result.TexCoord = Input.TexCoord;
#endif
#if NEEDS_VERTEX_LIGHTMAP
	Result.LightMapA = Input.LightMapA;
	Result.LightMapB = Input.LightMapB;
	Result.LightMapC = Input.LightMapC;
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
	Result.LightMapA = Input.LightMapA;
// APB(SJT) +
	Result.NightFactor = Input.NightFactor;
// APB(SJT) -
#endif
#if NEEDS_LIGHTMAP_COORDINATE
	Result.LightMapCoordinate = Input.LightMapCoordinate;
#endif

// APB(SJT) +
#if VERTEX_AOMAP
	Result.AOAndShadowMap = Input.AOAndShadowMap;
#endif
// APB(SJT) -
	
#endif

	return Result;
}

float4x4 GetInstanceToWorld(FVertexFactoryInput Input)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	return transpose(
		float4x4(
// APB(SJT): Axes are now packed normals, so need to convert to correct range here. +
			float4(TangentBias(InstancedInput.InstanceXAxis),0),
			float4(TangentBias(InstancedInput.InstanceYAxis),0),
			float4(TangentBias(InstancedInput.InstanceZAxis),0),
// APB(SJT) -
			float4(InstancedInput.InstanceOffset,1)
			)
		);
}

#if NEEDS_LIGHTMAP_COORDINATE
float2 GetInstanceLightMapCoordinate(FVertexFactoryInput Input)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	return InstancedInput.LightMapCoordinate;
}
#endif

#if NEEDS_VERTEX_LIGHTMAP
void VertexFactoryGetVertexLightMap(FVertexFactoryInput Input,out float4 LightMapA,out float4 LightMapB,out float4 LightMapC)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	LightMapA = InstancedInput.LightMapA;
	LightMapB = InstancedInput.LightMapB;
	LightMapC = InstancedInput.LightMapC;
}
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
void VertexFactoryGetSimpleVertexLightMap(FVertexFactoryInput Input,out float4 LightMapA)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	LightMapA = InstancedInput.LightMapA;
}
#endif

// APB(SJT) +

#if DOUBLE_LIGHTMAP
	#if NEEDS_VERTEX_LIGHTMAP
		float3 VertexFactoryGetVertexNightFactor(FVertexFactoryInput Input)
		{
			FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);

			// Night factor is packed in alpha channels.
			return float3(
				InstancedInput.LightMapA.a,
				InstancedInput.LightMapB.a,
				InstancedInput.LightMapC.a);
		}
	#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
		float3 VertexFactoryGetVertexNightFactor(FVertexFactoryInput Input)
		{
			FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
			return InstancedInput.NightFactor;
		}
	#endif
#endif

#if VERTEX_AOMAP
	// Directional light shadow map accessor (for lit base pass).
	half VertexFactoryGetVertexShadowMap(FVertexFactoryInput Input)
	{
		FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
		return InstancedInput.AOAndShadowMap.y;
	}
#endif

// APB(SJT) -

float3 VectorLocalToWorld(FVertexFactoryInput Input,float3 LocalVector)
{
	return mul(GetInstanceToWorld(Input),float4(LocalVector,0));
}

float4 CalcWorldPosition(FVertexFactoryInput Input)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	return mul(GetInstanceToWorld(Input),InstancedInput.Position);
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentBasis( FVertexFactoryInput Input )
{
	float3x3 Result=0;	

	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);

	half4 TangentZ = TangentBias(InstancedInput.TangentZ);
	// pass-thru the tangent
	Result[0] = TangentBias(InstancedInput.TangentX);
	// pass-thru the normal
	Result[2] = float3(TangentZ.x,TangentZ.y,TangentZ.z);
	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;

	return Result;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input)
{
	return CalcWorldPosition(Input);
}

FVertexFactoryInterpolants VertexFactoryGetInterpolants(FVertexFactoryInput Input)
{
	FVertexFactoryInterpolants Interpolants;
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);

#if NUM_MATERIAL_TEXCOORDS
	// Ensure the unused components of the last packed texture coordinate are initialized.
	Interpolants.TexCoord = 0;

	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex += 2)
	{
		Interpolants.TexCoord = InstancedInput.TexCoord;
		if(CoordinateIndex + 1 < NUM_MATERIAL_TEXCOORDS)
		{
			Interpolants.TexCoord = InstancedInput.TexCoord;
		}
	}
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	Interpolants.LightMapCoordinate = GetInstanceLightMapCoordinate(Input) * ShadowCoordinateScaleBias.xy + ShadowCoordinateScaleBias.wz;
#endif

#if WORLD_COORDS
	float3x3 LocalToTangent = VertexFactoryGetTangentBasis(Input);
	// The inverse of LocalToTangent is just the transpose because it is an orthonormal basis
	float3x3 TangentToLocal = transpose(LocalToTangent);
	// Calculate the transform from tangent to world space
	float3x3 TangentToWorld = MulMatrix(GetInstanceToWorld(Input), TangentToLocal);

// APB(SJT) +
	// MODIFIED SJT: Take .xyz since vertex AO is packed into the w coord. +
	Interpolants.TangentToWorld0_VertexAO.xyz = TangentToWorld[0];
	Interpolants.TangentToWorld2 = float4(TangentToWorld[2], 1.0f);

	// ADDED SJT:
	#if VERTEX_AOMAP
		// Set per-vertex AO.
		Interpolants.TangentToWorld0_VertexAO.w = InstancedInput.AOAndShadowMap.x;
	#else
		Interpolants.TangentToWorld0_VertexAO.w = 1;
	#endif
#else
	#if VERTEX_AOMAP
		// Set per-vertex AO.
		Interpolants.VertexAO = InstancedInput.AOAndShadowMap.x;
	#endif
// APB(SJT) -
#endif

#if !COMPILER_SUPPORTS_EMPTY_STRUCTS && !WORLD_COORDS && !NEEDS_LIGHTMAP_COORDINATE && !NUM_MATERIAL_TEXCOORDS
	Interpolants.Dummy = float4(0,0,0,0);
#endif

	return Interpolants;
}

half3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input)
{
	FInstancedVertexFactoryInput InstancedInput = GetInstancedVertexFactoryInput(Input);
	return VectorLocalToWorld(Input, TangentBias(InstancedInput.TangentZ));
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input)
{
	return CalcWorldPosition(Input);
}

/**
* Transform a vector from world space to tangent space
*
* @param Input - vertex input stream structure
* @param TangentBasis - 3x3 matrix to transform to tangent space
* @param WorldVector - vector in world space to transform 
* @return vector in tangent space
*/
float3 VertexFactoryWorldToTangentSpace( FVertexFactoryInput Input, float3x3 TangentBasis, float3 WorldVector )
{
	// we use a straight mul here because we are generating the matrix, so we don't worry about column major vs row major (which is what MulMatrix manages per-platform)
	return mul(
		TangentBasis,
		mul(float4(WorldVector,0),GetInstanceToWorld(Input)).xyz
		);
}
