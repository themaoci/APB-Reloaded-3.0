/*=============================================================================
	HeightFogPixelShader.usf: Scene fogging pixel shader.
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
	TheMaoci Rewrited / some fixes and remove stupidity
=============================================================================*/

#include "Common.usf"
#include "_Settings.usf"

static const float FLT_EPSILON = 0.001f;

float2 LinePlaneIntersection2(float RelativeB,float2 RelativeZ) {
	return RelativeZ / (abs(RelativeB) <= FLT_EPSILON ? FLT_EPSILON : RelativeB);
}
float4 LinePlaneIntersection4(float RelativeB,float4 RelativeZ) {
	return RelativeZ / (abs(RelativeB) <= FLT_EPSILON ? FLT_EPSILON : RelativeB);
}

float4	FogDistanceScale;// used to scale fog layer distance
float4	FogExtinctionDistance;// any layer distance beyond this is clamped to full fog
half4	FogInScattering[4];// lighting contribution from fog.  This uses 4 components to avoid platform-specific alignment of each element of the array.
float4	FogStartDistance;// distance at which fog will start
float	FogMinStartDistance;// minimum fog start distance for all fog layers

// Alpha-blended Method --- 1 Layer
void OneLayerMain(
	float4 OutTexCoordAndHeightRelativeZ : TEXCOORD0,
	float4 ScreenVector : TEXCOORD1,
	out float4 OutColor : COLOR0
	)
{
	half	SceneDepth = CalcSceneDepth(OutTexCoordAndHeightRelativeZ.xy);
	#if SUPPORTS_DEPTH_TEXTURES
		half	ClampedSceneDepth = SceneDepth;
	#else
		float	ClampedSceneDepth = clamp(SceneDepth,1,65535 / ALPHA_DEPTH_SCALE_FACTOR);
	#endif
	float3	WorldPosition = ScreenVector.xyz * ClampedSceneDepth;
	#if SET_FOG
		float DistInFront = length(WorldPosition) - FogStartDistance.x * ( FOG_DISTANCE / 50.0 );
	#else
		float DistInFront = length(WorldPosition) - FogStartDistance.x * 4096;
	#endif
	clip( DistInFront );
	float2	HeightPercent = saturate(LinePlaneIntersection2(WorldPosition.z,OutTexCoordAndHeightRelativeZ.zw));
	float	LayerDistance = DistInFront * abs(HeightPercent.y - HeightPercent.x); // fog layer distance based on % over max/min fog heights
	float	NegFogLineIntegral = FogDistanceScale.x * LayerDistance;
	half	Scattering = LayerDistance < FogExtinctionDistance.x ? exp2(NegFogLineIntegral) : 0.0f;
	half	InScattering = Scattering - 1; // ratio of the inscattering color to be used
	#if SET_NOFOG_KYOUKI
		half3 FogColor = InScattering * FogInScattering[3];	
	#else
		half3 FogColor = InScattering * FogInScattering[0];	
	#endif
	OutColor = RETURN_COLOR(half4(FogColor,Scattering)); // return fog color as well as blending factor
}

// Alpha-blended Method --- 4 Layers
void FourLayerMain(
	float2 TexCoord : TEXCOORD0,
	float4 ScreenVector : TEXCOORD1,
	float4 MinHeightRelativeZ : TEXCOORD2,
	float4 MaxHeightRelativeZ : TEXCOORD3,
	out float4 OutColor : COLOR0
	)
{
	float ALPHA[4]; // declaring alpha once
	half	SceneDepth = CalcSceneDepth(TexCoord);
	#if SUPPORTS_DEPTH_TEXTURES
		half	ClampedSceneDepth = SceneDepth;
	#else
		float	ClampedSceneDepth = clamp(SceneDepth,1,65535);
	#endif
	float MinDistInFront = ClampedSceneDepth - FogMinStartDistance; // clip fog pixels in front of ALL of the fog layer's start distances to save frame buffer bandwidth
	clip(MinDistInFront);
	{
		float3	WorldPosition = ScreenVector.xyz * ClampedSceneDepth; // calculate the world position using the deprojected screen vector by multiplying with scene w
		float4	MinHeightPercent = LinePlaneIntersection4(WorldPosition.z,MinHeightRelativeZ); // maxfog - camera / z height
		float4	MaxHeightPercent = LinePlaneIntersection4(WorldPosition.z,MaxHeightRelativeZ); // minfog - camera / z height
		#if SET_FOG
			float4 LayerDistance = max(float4(0,0,0,0),ClampedSceneDepth.xxxx - FogStartDistance) * abs(saturate(MaxHeightPercent) - saturate(MinHeightPercent)) * ( FOG_DISTANCE_4L / 100.0 ); // fog layer distance based on % over max/min fog heights
		#else
			float4 LayerDistance = max(float4(0,0,0,0),ClampedSceneDepth.xxxx - FogStartDistance) * abs(saturate(MaxHeightPercent) - saturate(MinHeightPercent)); // fog layer distance based on % over max/min fog heights
		#endif

		//float4	LayerDistance = max(float4(0,0,0,0),ClampedSceneDepth.xxxx - FogStartDistance) * abs(saturate(MaxHeightPercent) - saturate(MinHeightPercent)) * ; // fog layer distance based on % over max/min fog heights
		float4	Scattering = LayerDistance < FogExtinctionDistance ? exp2(FogDistanceScale * LayerDistance) : float4(0,0,0,0); // clamp anything beyond the extinction distance to 0 scattering		
		float4	InScattering = Scattering - 1; // ratio of the inscattering color to be used

		// We are trying to represent the following in an alpha-blend:
		// 
		// SceneColor = SceneColor * Scattering.x + InScattering.x * FogInScattering[0];
		// SceneColor = SceneColor * Scattering.y + InScattering.y * FogInScattering[1];
		// SceneColor = SceneColor * Scattering.z + InScattering.z * FogInScattering[2];	
		// SceneColor = SceneColor * Scattering.w + InScattering.w * FogInScattering[3];
		//
		// With S = SceneColor, A = Scattering, B = InScattering * FogInScattering:
		//
		// S = [ [ [ S * A1 + B1 ] * A2 + B2 ] * A3 + B3 ] * A4 + B4
		// S = [ [ S * A1 * A2 + B1 * A2 + B2 ] * A3 + B3 ] * A4 + B4
		// S = [ S * A1 * A2 * A3 + B1 * A2 * A3 + B2 * A3 + B3 ] * A4 + B4
		// S = S * A1 * A2 * A3 * A4 + B1 * A2 * A3 * A4 + B2 * A3 * A4 + B3 * A4 + B4
		//
		// S = S * (A1A2A3A4) + B1 * (A2A3A4) + B2 * (A3A4) + B3 * (A4) + B4;
		// F = B1 * A2A3A4 + B2 * A3A4 + B3 * A4 + B4
		// F = (A1 - 1) * A2A3A4 * F1 + (A2 - 1) * A3A4 * F2 + (A3 - 1) * A4 * F3 + (A4 - 1) * F4
		// F = (A1A2A3A4 - A2A3A4) * F1 + (A2A3A4 - A3A4) * F2 + (A3A4 - A4) * F3 + (A4 - 1) * F4
		ALPHA[3] = Scattering.w;
		ALPHA[2] = Scattering.w * Scattering.z;
		ALPHA[1] = Scattering.w * Scattering.z * Scattering.y;
		ALPHA[0] = Scattering.w * Scattering.z * Scattering.y * Scattering.x;
		
		#if SET_NOFOG_KYOUKI
			float3 FogColor = InScattering[3] * FogInScattering[3];	
		#else
			float3 FogColor =                InScattering[3] * FogInScattering[3];
			FogColor = FogColor + ALPHA[3] * InScattering[2] * FogInScattering[2];
			FogColor = FogColor + ALPHA[2] * InScattering[1] * FogInScattering[1];
			FogColor = FogColor + ALPHA[1] * InScattering[0] * FogInScattering[0];
		#endif	
		OutColor = RETURN_COLOR(half4(FogColor,ALPHA[0])); // return fog color as well as blending factor
	}	
}
