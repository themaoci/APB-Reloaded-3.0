/*=============================================================================
	BasePassPixelShader.usf: Base pass pixel shader
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

// APB - SJT: MODIFIED: We also need lightmap coordinates for AO. +
#define NEEDS_LIGHTMAP_COORDINATE	(TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP || TEXTURE_AOMAP)
// APB - SJT -

/* If simple lighting is enabled then the base pass shader will just be Diffuse * LightMap + Emissive */
#define SIMPLE_LIGHTING				((SIMPLE_VERTEX_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP) && !MATERIAL_LIGHTINGMODEL_CUSTOM)

// SH lighting requires a TangentToWorld matrix.
#if ENABLE_SH_LIGHT
	#undef WORLD_COORDS
	#define WORLD_COORDS 1
#endif

// APB(SJT): Don't use basepass fogging with world-coords, as there aren't enough interpolators. +
#define NEEDS_BASEPASS_FOGGING		((MATERIALBLENDING_TRANSLUCENT || MATERIALBLENDING_ADDITIVE) && !WORLD_COORDS)
// APB(SJT) -

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#if ENABLE_SH_LIGHT
	#include "SphericalHarmonicCommon.usf"
#endif

/** 1 if this object is moving, and 0 otherwise */
float VelocityMask;

/** Color of the combined directional light */
float3 LightColor;

half3 UpperSkyColor;
half3 LowerSkyColor;


// APB(SJT) +

// Directional light colour for lit base pass.
half3 DirectionalLightColour;

// LOD blending support.
float4 LODBlendParams;
static float LODBlendAlpha = LODBlendParams.x;

// Factor to multiply with the depth that is written to the alpha channel.
// Should be equal to ALPHA_DEPTH_SCALE_FACTOR for opaque meshes and 
// zero for LOD blend meshes (it is ignored for non-opaque materials).
static float fAlphaDepthScaleFactor = LODBlendParams.y;

// Constant fog factor for world-coord materials (not enough interpolators for vertex fog)
half4 FogConstant;

// Factor used to modulate the attenuation buffer by (used by light environments).
// 0 = Normal, 1 = completely faded out.
// x is the factor, y is 1 - factor.
float2 AttenuationFactor;

// APB(SJT) -


// SkyFactor and AmbientColor are constants if we assume SHOW_Lighting to be always set. We make the assumption that on console 
// performance is more important than being able to toggle this flag and therefore use special shortcut.
#if XBOX || PS3
static const half3 AmbientColor = 0;
static const half SkyFactor = 1;
#else
half4 AmbientColorAndSkyFactor;
static const half3 AmbientColor = AmbientColorAndSkyFactor.rgb;
static const half SkyFactor = AmbientColorAndSkyFactor.a;
#endif

// APB(SJT): AO support +
#if TEXTURE_AOMAP
sampler2D AOMapTexture;
#endif
// APB(SJT) -

#if TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP
//Directional lightmaps use 3 samplers here so the most a material can use is 13 
//This is enforced by the material compiler through MAX_ME_PIXELSHADER_SAMPLERS
sampler2D LightMapTextures[NUM_LIGHTMAP_COEFFICIENTS];

// The light-map scale array is a set of float4s so it can be set as a contiguous chunk regardless of platform shader constant alignment.
float4 LightMapScale[NUM_LIGHTMAP_COEFFICIENTS];


// APB - SJT +

// APB(SJT): For single lightmapping, this is the level of the only lightmap.
// For dual lightmapping, it is the level of the secondary lightmap
// (the level of the primary lightmap does not change when double lightmapping).
float fLightMapLevel;

//  Textures & scale for the secondary lightmap.
#if DOUBLE_LIGHTMAP
//sampler2D	LightMap2Textures[NUM_LIGHTMAP_COEFFICIENTS];
//float3		LightMap2Scale[NUM_LIGHTMAP_COEFFICIENTS];
sampler2D NightFactorTexture;
#endif

// APB - SJT -

#endif

void Main(
	FVertexFactoryInterpolants Interpolants,

	#if VERTEX_LIGHTMAP
	//for vertex-lightmapped translucency we are out of interpolators to pass in the vertex fog
	//so it must be packed in the w of other interpolators
	// APB(SJT): This is actually the tangen-space light vector for LBP, not the fog.
		float4 LightMapA_FogR	: TEXCOORD2,
		float4 LightMapB_FogG	: TEXCOORD3,
		float4 LightMapC_FogB	: TEXCOORD4,
	#else
		#if SIMPLE_VERTEX_LIGHTMAP
			float3 LightMapA		: TEXCOORD2,
		#endif
		//for texture-lightmapped translucency we can pass the vertex fog in its own interpolator
// APB(SJT): Moved outside the VERTEX_LIGHTMAP conditional +
//		#if NEEDS_BASEPASS_FOGGING
//			float4 VertexFog		: TEXCOORD4,
//		#endif
// APB(SJT) -

// APB(SJT): Lit base pass +
		#if !MATERIAL_LIGHTINGMODEL_UNLIT
			float4 TangentDirectionalLightVector_VertexShadowMap	: TEXCOORD4,
		#endif
// APB(SJT) -
	#endif

// APB(SJT): Fog is no-longer dependent on VERTEX_LIGHTMAP, so I've moved it down here. +
	#if NEEDS_BASEPASS_FOGGING
		// Use COLOR0 for the fog (note: not free when using world-coords)
		float4 VertexFog		: COLOR0,
	#endif
// APB(SJT) -

	float4 PixelPosition	: TEXCOORD5,
	float4 CameraVector_FogA: TEXCOORD6,
#if !MATERIAL_LIGHTINGMODEL_UNLIT
	float3 SkyVector		: TEXCOORD7,
#endif
	OPTIONAL_FacingSign
	out float4 OutColor		: COLOR0
	)
{
	FMaterialParameters MaterialParameters = GetMaterialParameters(Interpolants);

	//Don't flip the normal for backfaces of two-sided materials used with this shader.
	//As a result, the backfaces will have the same lighting as the frontfaces, instead of being mostly black.
	CalcMaterialParameters(MaterialParameters,FacingSign,CameraVector_FogA.xyz,PixelPosition,half3(0,0,1),false);

#if MATERIALBLENDING_MASKED || MATERIAL_DECAL
	//Clip if the blend mode requires it.
	GetMaterialClipping(MaterialParameters);
#endif

	half3 Color = GetMaterialEmissive(MaterialParameters);

	#if !MATERIAL_LIGHTINGMODEL_UNLIT
		#if !SIMPLE_LIGHTING

			static const half3x3 LightMapBasis = half3x3(
				half3(	0.0f,					-1.0f / sqrt(2.0f),			+1.0f / sqrt(2.0f)),
				half3(	sqrt(6.0f) / 3.0f,		-1.0f / sqrt(6.0f),			-1.0f / sqrt(6.0f)),
				half3(	1.0f / sqrt(3.0f),		1.0f / sqrt(3.0f),			1.0f / sqrt(3.0f))
				);

#if DECAL_FACTORY
			// for decals the normal and reflection vector are transformed ouf of the projected decal frame 
			// and back into the original vertex basis.  Interpolants.TangentToWorld2 contains the 2x2 rotation

			half MatNormalX = dot( MaterialParameters.TangentNormal.xy, (Interpolants.TangentToWorld2.xy - 0.5) * 2 );
			half MatNormalY = dot( MaterialParameters.TangentNormal.xy, (Interpolants.TangentToWorld2.zw - 0.5) * 2 );
			half3 MatNormal = half3(MatNormalX,MatNormalY,MaterialParameters.TangentNormal.z);

			half MatReflectX = dot( MaterialParameters.TangentReflectionVector.xy, (Interpolants.TangentToWorld2.xy - 0.5) * 2 );
			half MatReflectY = dot( MaterialParameters.TangentReflectionVector.xy, (Interpolants.TangentToWorld2.zw - 0.5) * 2 );
			half3 MatReflect = half3(MatReflectX,MatReflectY,MaterialParameters.TangentReflectionVector.z);

			half3 LightMapNormal = mul(MatNormal,LightMapBasis);
			half3 LightMapReflectionVector = mul(MatReflect,LightMapBasis);

#else
			half3 LightMapNormal = mul(MaterialParameters.TangentNormal,LightMapBasis);
			half3 LightMapReflectionVector = mul(MaterialParameters.TangentReflectionVector,LightMapBasis);
#endif

			half3 TwoSidedLightingMask = GetMaterialTwoSidedLightingMask(MaterialParameters);
			#if MATERIAL_LIGHTINGMODEL_NONDIRECTIONAL
				TwoSidedLightingMask = 1;
			#endif

			#if !MATERIAL_LIGHTINGMODEL_CUSTOM
				half3 DiffuseTransferCoefficients = 
					pow(
						saturate(LightMapNormal) * saturate(LightMapNormal),
						GetMaterialDiffusePower(MaterialParameters)
						) * (1 - TwoSidedLightingMask) + TwoSidedLightingMask;
				half3 SpecularTransferCoefficients =
					pow(
						saturate(LightMapReflectionVector),
						GetMaterialSpecularPower(MaterialParameters) + 1
						) * (1 - TwoSidedLightingMask);
			#endif

		#endif //#if SIMPLE_LIGHTING

		#if VERTEX_LIGHTMAP
			half3 VertexLightMap[3] = { LightMapA_FogR.xyz, LightMapB_FogG.xyz, LightMapC_FogB.xyz };
		#elif SIMPLE_VERTEX_LIGHTMAP
			half3 VertexLightMap[1] = { LightMapA };
		#endif

// APB(SJT) +
		// Sample night factor for double lightmapping.
		#if (TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP) && DOUBLE_LIGHTMAP
			half3 NightFactor = tex2D(NightFactorTexture, GetLightMapCoordinate(Interpolants)).rgb;
		#endif
// APB(SJT) -

		half3 LightTransfer = 0;
		UNROLL
		for(int CoefficientIndex = 0;CoefficientIndex < NUM_LIGHTMAP_COEFFICIENTS;CoefficientIndex++)
		{
			#if TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP
				half3 LightMap = tex2D(LightMapTextures[CoefficientIndex],GetLightMapCoordinate(Interpolants)).rgb * LightMapScale[CoefficientIndex].rgb;

// APB(SJT) +
				#if !DOUBLE_LIGHTMAP
					// Modulate lightmap by the required amount.
					LightMap *= fLightMapLevel;
				#else
					// Compute required lightmap level based on night factor and time of day.
					// Note: NightFactor is inverted, so 1 == day time.
					LightMap = (NightFactor + (1 - NightFactor) * fLightMapLevel) * LightMap;

					// Add in second lightmap contribution.
					//LightMap += tex2D(LightMap2Textures[CoefficientIndex],GetLightMap2Coordinate(Interpolants)).rgb * LightMap2Scale[CoefficientIndex] * fLightMapLevel;
				#endif
// APB(SJT) -

			#elif VERTEX_LIGHTMAP || SIMPLE_VERTEX_LIGHTMAP
				half3 LightMap = VertexLightMap[CoefficientIndex];
			#else
				half3 LightMap = 0;
			#endif

// APB(SJT): Set light vector and add in custom lighting for phong model. +
			#if MATERIAL_LIGHTINGMODEL_CUSTOM || (MATERIAL_LIGHTINGMODEL_PHONG && !SIMPLE_LIGHTING)
				MaterialParameters.TangentLightVector = LightMapBasis[CoefficientIndex];
				LightTransfer += LightMap * GetMaterialCustomLighting(MaterialParameters);
			#endif
			#if MATERIAL_LIGHTINGMODEL_CUSTOM
				// Don't do anything here: it's just to maintain the #if structure of the Epic
				// code to ease future merges.
// APB(SJT) -
			#elif SIMPLE_LIGHTING
				LightTransfer += pow(LightMap,GetMaterialDiffusePower(MaterialParameters)) *
					GetMaterialDiffuseColorNormalized(MaterialParameters);
			#else
				LightTransfer += LightMap * DiffuseTransferCoefficients[CoefficientIndex] * GetMaterialDiffuseColorNormalized(MaterialParameters);
				#ifndef DISABLE_LIGHTMAP_SPECULAR
					LightTransfer += LightMap * SpecularTransferCoefficients[CoefficientIndex] * GetMaterialSpecularColor(MaterialParameters);
				#endif
			#endif
		}

		Color += LightTransfer;

		#if ENABLE_SKY_LIGHT
			
// APB(SJT): AO support +
/*
			Color += GetMaterialHemisphereLightTransferFull(MaterialParameters,normalize(SkyVector),UpperSkyColor,LowerSkyColor) * SkyFactor;
*/
			float fAO = 1;
			#if TEXTURE_AOMAP
				// Read AO from the Map.
				fAO = tex2D(AOMapTexture, GetAOCoordinate(Interpolants)).g;
			#elif VERTEX_AOMAP
				// Get AO from vertex factory.
				fAO = GetVertexAO(Interpolants);
			#endif

			// Modified SJT: Multiply by AO factor.
			Color += GetMaterialHemisphereLightTransferFull(MaterialParameters,normalize(SkyVector),UpperSkyColor,LowerSkyColor) * SkyFactor * fAO;
// APB(SJT) -

		#endif

// APB(SJT) +
		// Lit base pass.
		#if ENABLE_DIRECTIONAL_LIGHT

			// Get light attenuation from the texture.
			half3	Attenuation = GetLightAttenuation(MaterialParameters.ScreenPosition);

			// Modulate attenuation for non-statically lit shaders. This is used by light
			// environments to modulate the affect of light functions/dynamic shadows
			// depending on the influence of the sun.
			#if !TEXTURE_AOMAP && !VERTEX_AOMAP
				// This is basically a lerp-to-1 with some trickery to save instructions.
				Attenuation = Attenuation * AttenuationFactor.y + AttenuationFactor.x;
			#endif

			// Static shadows.
			#if TEXTURE_AOMAP
				// Read static shadows from alpha channel of the AO map.
				half LightMask = Square(tex2D(AOMapTexture, GetAOCoordinate(Interpolants)).a);
			#elif VERTEX_AOMAP
				#if !VERTEX_LIGHTMAP
					// Vertex shadow map is packed in the light vector alpha channel.
					half LightMask = TangentDirectionalLightVector_VertexShadowMap.w;
				#else
					// Vertex shadow map is packed in the camera vector alpha channel when vertex lightmapping.
					half LightMask = CameraVector_FogA.w;
				#endif
			#else
				half LightMask = 1;
			#endif

			// Set tangent space light vector to the one from the vertex shader.
			#if !VERTEX_LIGHTMAP
				MaterialParameters.TangentLightVector = normalize(TangentDirectionalLightVector_VertexShadowMap.xyz);
			#else
				// Light vector is packed in the alpha of the lightmaps.
				MaterialParameters.TangentLightVector = normalize(float3(LightMapA_FogR.w, LightMapB_FogG.w, LightMapC_FogB.w));
			#endif

			Color += 
				Attenuation *
				LightMask *
				// Hard code world-space light vector to zero, as this is what the standalone shader does.
				GetMaterialPointLightTransfer(MaterialParameters,0,0) *
				DirectionalLightColour;

		#endif
// APB(SJT) -

		// Calculate lighting for a SH light
		#if ENABLE_SH_LIGHT
			half3 WorldNormal = mul(MaterialParameters.TangentToWorld,MaterialParameters.TangentNormal);;
			Color += ComputeSHLighting(WorldNormal, MaterialParameters);
		#endif

		#if !SIMPLE_LIGHTING
			Color += GetMaterialDiffuseColor(MaterialParameters) * AmbientColor;
		#endif

	#endif

// APB(SJT): Edited this a bit. +
	#if NEEDS_BASEPASS_FOGGING
		half4 Fog;
		// SJT: Fog is now always its own variable when enabled.
		/*
		#if VERTEX_LIGHTMAP
			//fog was stored in the .w of each interpolator
			Fog = half4(LightMapA_FogR.w, LightMapB_FogG.w, LightMapC_FogB.w, CameraVector_FogA.w);
		#else
			Fog = VertexFog;
		#endif
		*/
		Fog = VertexFog;
	#else
		// SJT: Use constant factor if proper fogging is disabled (e.g. world-coords are used).
		half4 Fog = FogConstant;
	#endif
// APB(SJT) -

	half Opacity = GetMaterialOpacity(MaterialParameters);

// APB(SJT) +
	// Multiply opacity by lod-blend alpha to allow lod blending without a separate shader.
	Opacity *= LODBlendAlpha;
// APB(SJT) -

	#if MATERIALBLENDING_TRANSLUCENT
		OutColor = MaterialGammaCorrect(half4(Color * Fog.a + Fog.rgb, Opacity));
		OutColor = RETURN_COLOR(OutColor);
	#elif MATERIALBLENDING_ADDITIVE
		OutColor = MaterialGammaCorrect(half4(Color * Fog.a * Opacity, 0.0f));
		OutColor = RETURN_COLOR(AccumulateSceneColor(OutColor));
	#elif MATERIALBLENDING_MODULATE
		// RETURN_COLOR not needed with modulative blending
// APB(SJT): Added fog contribution. +
		OutColor = MaterialGammaCorrect(half4(lerp(1, Color, Fog.a), Opacity));
// APB(SJT) -

// APB - MS + Added BLEND_OpaqueWriteAlpha blend mode.
	#elif MATERIALBLENDING_OPAQUEWRITEALPHA
		OutColor = RETURN_COLOR( MaterialGammaCorrect(float4(Color, Opacity)) );
// APB - MS -

	#else
		// Output clip space w in scene color alpha
// APB(SJT): Scale depth by ALPHA_DEPTH_SCALE_FACTOR, and add in lod-blend alpha. +
// This allows the same shader to be used for opaque and lod-blend primitives.
		float4 Result = float4(Color, MaterialParameters.ScreenPosition.w * fAlphaDepthScaleFactor + LODBlendAlpha);
		OutColor = RETURN_COLOR(MaterialGammaCorrect(Result));
		//OutColor = RETURN_COLOR(MaterialGammaCorrect(float4(Color,MaterialParameters.ScreenPosition.w * ALPHA_DEPTH_SCALE_FACTOR)));
// APB(SJT) -
	#endif
}
