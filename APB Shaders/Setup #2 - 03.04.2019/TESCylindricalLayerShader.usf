/***************************************************************************************
 * TESCylindricalLayerShader.usf
 * -----------------------------
 * 
 * Shader that performs the layer rendering pass
 * (cylindrical projection)
 *
 * OWNER: Maurizio Sciglio 27/01/2006
 *
 * ---Amendments-----
 *
 * (c) 2006 Real Time Worlds, Ltd.
 ****************************************************************************************/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#define PI 3.141592653

float4x4	ViewMatrix;
float		CylinderRotation;
float		Height;
float		HalfCylinderSelector;

float		MaskUsage; // <0 : Inverted, >0 : Normal

float		SquareRadius;
sampler		LayerTexture; 
float4		LayerColour;
sampler		MaskTexture;
sampler		DepthTexture;
float		DepthBias;

struct vertexShaderOutput
{
	float4		Position				: POSITION;	
	float2		CylTextureCoords		: TEXCOORD4;
	float2		CylVector				: TEXCOORD5;
	float2		LayerTexCoord			: TEXCOORD6;
	
	FVertexFactoryInterpolants  OutFactoryInterpolants;	
};

vertexShaderOutput vertexShader(FVertexFactoryInput Input)
{
	vertexShaderOutput Result;
	
	// Vertex position in texture space
	Result.Position = float4( Input.TexCoords[0].x * 2.0f - 1.0f, 
	                        -(Input.TexCoords[0].y * 2.0f - 1.0f), 
	                          0.0f, 
	                          1.0f);
	
	// Position in camera space
	float4 viewPosition = MulMatrix(ViewMatrix,VertexFactoryGetWorldPosition(Input));	
	Result.OutFactoryInterpolants = VertexFactoryGetInterpolants(Input);
	
	// If we are rendering the left side of the cylinder rotate the cylinder vector by 180 degrees to avoid the cylinder's junction
	viewPosition.xy=viewPosition.xy * sign(HalfCylinderSelector);
	
	// Apply cylindrical mapping
	// APB - DF: Do not rotate the coordinates used for deapth test
	Result.CylTextureCoords.x = 1 - ( atan2(viewPosition.y,viewPosition.x) + PI ) / (2.0f*PI);			
	Result.CylTextureCoords.y = 1 -(viewPosition.z / Height);
	
	// APB - DF: Use a seperate set of UV coordinates for the layer sampling taking into account the rotation and cylinder half
	Result.LayerTexCoord.x = Result.CylTextureCoords.x + CylinderRotation;
	if (HalfCylinderSelector < 0)
	{
		Result.LayerTexCoord.x += 0.5;
	}
	Result.LayerTexCoord.y = 1 -(viewPosition.z / Height);
	
	Result.CylVector=viewPosition.xy;
		                            
	return Result;
}

float RetMaskValue(float2 TexCoords)
{
	float maskValue = tex2D(MaskTexture,TexCoords).r;
	return (MaskUsage>0.0f) ? maskValue : 1-maskValue;
}

float4 pixelShaderBlendingAdditive(FVertexFactoryInterpolants	FactoryInterpolants,
								   float2 CylTextureCoords		: TEXCOORD4,
								   float2 CylVector				: TEXCOORD5,
								   float2 LayerTexCoord			: TEXCOORD6 ) : COLOR0
{	
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);

	// APB - DF: Get rid of coordinates with time outside the cylinders segment
	clip( LayerTexCoord.y );
	clip( 1.0 - LayerTexCoord.y );
	
	float maskValue = RetMaskValue(MaterialParameters.TexCoords[0]);
	
	// Discard the pixels outside the cylinder	
	float fSquareDistance = CylVector.x*CylVector.x + CylVector.y*CylVector.y;		
	clip(SquareRadius-fSquareDistance);									
	
	// We are only rendering half cylinder
	clip(CylVector.x);	

	// Sample the distance from the depth pass
	float fDistance = sqrt(fSquareDistance);
	float TexDistance = tex2D(DepthTexture, CylTextureCoords).r;
	
	// Sample the actual layer color
	float4 decalColour = tex2D(LayerTexture,LayerTexCoord);
	
	// APB - DF: Use this return value to color the pixels culled by the depth pass in red
	//return ((fDistance + DepthBias - TexDistance) < 0) ? float4(1,0,0,1) : float4(decalColour.rgb * LayerColour.rgb * LayerColour.a * maskValue, 1.0f);
	
	// APB - DF: Use this to do the usual culling and coloring
	clip(fDistance + DepthBias - TexDistance);	
	return float4(decalColour.rgb * LayerColour.rgb * LayerColour.a * maskValue, 1.0f);
}

float4 pixelShaderBlendingMultiplicative(FVertexFactoryInterpolants	FactoryInterpolants,
										 float2 CylTextureCoords	: TEXCOORD4,
										 float2 CylVector			: TEXCOORD5,
										 float2 LayerTexCoord		: TEXCOORD6  ) : COLOR0
{	
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);
	
	// Get rid of coordinates with time outside the cylinders segment
	clip( CylTextureCoords.y );
	clip( 1.0 - CylTextureCoords.y );
	
	float maskValue = RetMaskValue(MaterialParameters.TexCoords[0]);
	
	// Discard the pixels outside the cylinder	
	float fSquareDistance = CylVector.x*CylVector.x + CylVector.y*CylVector.y;		
	clip(SquareRadius-fSquareDistance);									
	
	// We are only rendering half cylinder
	clip(CylVector.x);
	
	// Sample the distance from the depth pass
	float fDistance = sqrt(fSquareDistance);
	float TexDistance = tex2D(DepthTexture, CylTextureCoords).r;
	
	// Sample the actual layer color
	float4 decalColour = tex2D(LayerTexture,LayerTexCoord);
	
	// APB - DF: Use this return value to color the pixels culled by the depth pass in red and pixels with alph in yellow
	//return (decalColour.a < 0.9) ? float4(1,1,0,1) : (((fDistance + DepthBias - TexDistance) < 0) ? float4(1,0,0,1) : float4(decalColour.a * decalColour.rgb * LayerColour.rgb * LayerColour.a * maskValue + 1 - decalColour.a * LayerColour.a * maskValue, 1.0f));
	
	// APB - DF: Use this to do the usual culling and coloring
	clip(fDistance + DepthBias - TexDistance);
	return float4(decalColour.a * decalColour.rgb * LayerColour.rgb * LayerColour.a * maskValue + 1 - decalColour.a * LayerColour.a * maskValue, 1.0f);
}

float4 pixelShaderBlendingAlpha(FVertexFactoryInterpolants	FactoryInterpolants,
							    float2 CylTextureCoords		: TEXCOORD4,
								float2 CylVector			: TEXCOORD5,
								float2 LayerTexCoord		: TEXCOORD6 ) : COLOR0
{	
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);
	
	// Get rid of coordinates with time outside the cylinders segment
	clip( CylTextureCoords.y );
	clip( 1.0 - CylTextureCoords.y );
	
	float maskValue = RetMaskValue(MaterialParameters.TexCoords[0]);
	
	// Discard the pixels outside the cylinder
	float fSquareDistance = CylVector.x*CylVector.x + CylVector.y*CylVector.y;		
	clip(SquareRadius-fSquareDistance);									
	
	// We are only rendering half cylinder
	clip(CylVector.x);	
	
	// Sample the distance from the depth pass
	float fDistance = sqrt(fSquareDistance);
	float TexDistance = tex2D(DepthTexture, CylTextureCoords).r;

	// Sample the actual layer color
	float4 decalColour = tex2D(LayerTexture,LayerTexCoord);
	
	// APB - DF: Use this return value to color the pixels culled by the depth pass in red and pixels with alph in yellow
	//return (decalColour.a < 0.9) ? float4(1,1,0,1) : (((fDistance + DepthBias - TexDistance) < 0) ? float4(1,0,0,1) : float4(LayerColour.rgb * decalColour.rgb, LayerColour.a * decalColour.a * maskValue));
	
	// APB - DF: Use this to do the usual culling and coloring
	clip(fDistance + DepthBias - TexDistance);
	return float4(LayerColour.rgb * decalColour.rgb * LayerColour.a * decalColour.a, LayerColour.a * decalColour.a * maskValue);	
}
