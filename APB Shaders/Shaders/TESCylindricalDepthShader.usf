/***************************************************************************************
 * TESCylindricalDepthShader.usf
 * -----------------------------
 *
 * Shader that performs the depth rendering pass (cylindrical projection)
 *
 * OWNER: Maurizio Sciglio 25/03/2009
 *
 * ---Amendments-----
 *
 * (c) 2009 Real Time Worlds, Ltd.
 ****************************************************************************************/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#define PI 3.141592653

float4x4	ViewMatrix;
float		Height;
float		HalfCylinderSelector;
float		SquareRadius;
float		Radius;

struct vertexShaderOutput
{
	float4						Position			: POSITION;			
	float2						CylVector			: TEXCOORD4;	

	FVertexFactoryInterpolants  OutFactoryInterpolants;
};

struct pixelShaderOutput
{
	float4	Colour	: COLOR0;
	float	Depth	: DEPTH0;
};

vertexShaderOutput vertexShader(FVertexFactoryInput Input)
{
	vertexShaderOutput Result;	

	// Position in camera space
	float4 viewPosition = MulMatrix(ViewMatrix,VertexFactoryGetWorldPosition(Input));	
	Result.OutFactoryInterpolants = VertexFactoryGetInterpolants(Input);

	// If we are rendering the left side of the cylinder rotate the cylinder vector by 180 degrees to avoid the cylinder's junction
	viewPosition.xy=viewPosition.xy * sign(HalfCylinderSelector);

	// Compute the cylindrical coordinates
	float2 CylTextureCoords;
	CylTextureCoords.x = 1 - ( atan2(viewPosition.y,viewPosition.x) + PI ) / (2.0f*PI);			
	CylTextureCoords.y = 1 -(viewPosition.z / Height);	

	CylTextureCoords.x = frac(CylTextureCoords.x);		

	Result.CylVector=viewPosition.xy;

	// Vertex position in cylindrical space
	Result.Position = float4( CylTextureCoords.x * 2.0f - 1.0f, 
	                        -(CylTextureCoords.y * 2.0f - 1.0f), 
	                          0.0f, 
	                          1.0f);

	return Result;
}

pixelShaderOutput pixelShader(FVertexFactoryInterpolants FactoryInterpolants,
							  float2 CylVector			: TEXCOORD4)						  
{
	pixelShaderOutput output;

	// Discard the pixels outside the cylinder
	float fSquareDistance = CylVector.x*CylVector.x + CylVector.y*CylVector.y;		
	clip(SquareRadius-fSquareDistance);									
	
	// We are only rendering half cylinder
	clip(CylVector.x);
	
	float fDistance = sqrt(fSquareDistance);

	output.Colour = fDistance;
	output.Depth = fDistance / Radius;

	return output;
}