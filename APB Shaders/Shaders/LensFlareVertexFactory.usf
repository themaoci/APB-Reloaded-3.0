/*=============================================================================
	LensFlareVertexFactory.usf: Lens flare vertex factory shader code.
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

float4		CameraRight;
float4		CameraUp;
float4x4	LocalToWorld;

struct FVertexFactoryInput
{
	float4	Position				: POSITION;
	float4	Size					: TANGENT;
	float	Rotation				: BLENDWEIGHT0;
	float2	TexCoord				: TEXCOORD0;
	float4	Color					: TEXCOORD1;
	float4	RadialDist_SourceRatio	: TEXCOORD2;
	float2	Occlusion_Intensity		: TEXCOORD3;
};

struct FVertexFactoryInterpolants
{
#if WORLD_COORDS
	// First row of the tangent to world matrix
	float3	TangentToWorld0	: COLOR0;
	// Last row of the tangent to world matrix in xyz
	float4	TangentToWorld2	: COLOR1;
#endif
	float2	TexCoord				: TEXCOORD0;
	float4	Color					: TEXCOORD1;
	float4	RadialDist_SourceRatio	: TEXCOORD2;
	float2	Occlusion_Intensity		: TEXCOORD3;
};

FMaterialParameters GetMaterialParameters(FVertexFactoryInterpolants Interpolants)
{
	FMaterialParameters	Result;
#if NUM_MATERIAL_TEXCOORDS
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex++)
		Result.TexCoords[CoordinateIndex] = Interpolants.TexCoord;
#endif	//#if NUM_MATERIAL_TEXCOORDS
	Result.VertexColor = Interpolants.Color;
	Result.TangentNormal = 0;
	Result.TangentCameraVector = 0;
	Result.TangentReflectionVector = 0;
	Result.TangentLightVector = 0;
	Result.ScreenPosition = 0;
#if WORLD_COORDS
	Result.TangentToWorld = CalcTangentToWorld(Interpolants.TangentToWorld0,Interpolants.TangentToWorld2);
#endif
#if USE_LENSFLARE
	Result.LensFlareSourceDistance = Interpolants.RadialDist_SourceRatio.x;
	Result.LensFlareRadialDistance = Interpolants.RadialDist_SourceRatio.y;
	Result.LensFlareRayDistance	= Interpolants.RadialDist_SourceRatio.z;
	Result.LensFlareIntensity = Interpolants.Occlusion_Intensity.y;
	Result.LensFlareOcclusion = Interpolants.Occlusion_Intensity.x;
#endif	//#if USE_LENSFLARE
	return Result;
}

#if !VERTEX_LIGHTMAP // AJS: If this is an emissive+vertex light-map shader, we can save an interpolator by skipping the light-map coordinate.
float2 GetLightMapCoordinate(FVertexFactoryInterpolants Interpolants)
{
	return Interpolants.TexCoord;
}
#endif	//#if !VERTEX_LIGHTMAP

float3 SafeNormalize(float3 V)
{
	return V / sqrt(max(dot(V,V),0.01));
}

void GetTangents(FVertexFactoryInput Input,out float4 Right,out float4 Up)
{
	float4	Position			= MulMatrix(LocalToWorld, Input.Position);

	float4	Right_Square		= CameraRight,
			Up_Square			= CameraUp;
			
	Right	= (-1.0 * cos(Input.Rotation) * Up_Square) + (sin(Input.Rotation) * Right_Square),
	Up		= (      sin(Input.Rotation) * Up_Square) + (cos(Input.Rotation) * Right_Square);
}

float4 CalcWorldPosition(FVertexFactoryInput Input)
{
	float4	WorldPosition = MulMatrix(LocalToWorld,Input.Position);

	float4	Right, Up;
	GetTangents(Input,Right,Up);

	WorldPosition += Input.Size.x * Input.Size.z * (Input.TexCoord.x - 0.5) * Right;
	WorldPosition += Input.Size.y * Input.Size.w * (Input.TexCoord.y - 0.5) * Up;

	return WorldPosition;
}

/** derive basis vectors */
float3x3 CalcTangentBasis(FVertexFactoryInput Input)
{
	float4	Right,
			Up;
	GetTangents(Input,Right,Up);
	return float3x3(
			Right.xyz,
			Up.xyz,
			normalize(cross(Right.xyz,Up.xyz))
			);
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input)
{
	return CalcWorldPosition(Input);
}

FVertexFactoryInterpolants VertexFactoryGetInterpolants(FVertexFactoryInput Input)
{
	FVertexFactoryInterpolants Interpolants;
	Interpolants.TexCoord				= Input.TexCoord;
	Interpolants.Color					= Input.Color;
	Interpolants.RadialDist_SourceRatio	= Input.RadialDist_SourceRatio;
	Interpolants.Occlusion_Intensity	= Input.Occlusion_Intensity;

#if WORLD_COORDS
	float3x3 LocalToTangent = CalcTangentBasis(Input);
	float3x3 TangentToLocal = transpose(LocalToTangent);
	float3x3 TangentToWorld = MulMatrix(LocalToWorld, TangentToLocal);

	Interpolants.TangentToWorld0 = TangentToWorld[0];
	Interpolants.TangentToWorld2 = float4(TangentToWorld[2], 1.0f);
#endif

	return Interpolants;
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input)
{
	return VertexFactoryGetWorldPosition(Input);
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentBasis( FVertexFactoryInput Input )
{
	return CalcTangentBasis(Input);
}

/**
* Transform a vector from world space to tangent space
*
* @param Input - vertex input stream structure
* @param TangentBasis - 3x3 matrix to transform to tangent space
* @param WorldVector - vector in world space to transform 
* @return vector in tangent space
*/
float3 VertexFactoryWorldToTangentSpace( FVertexFactoryInput Input, float3x3 TangentBasis, float3 WorldVector )
{
	// we use a straight mul here because we are generating the matrix, so we don't worry about column major vs row major (which is what MulMatrix manages per-platform)
	return mul(
		TangentBasis,
		WorldVector
		);
}

half3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input)
{
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input);
	return TangentBasis[2];
}
