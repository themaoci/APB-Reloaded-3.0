/***************************************************************************************/
/*! \file APBUberPostProcessBlendPixelShader.usf
*
* \brief Pixel shader for blending the blurred bloom colors with the scene color.
* Also performs tone mapping.
*
* \b NOW_OWNER: SJT           03/11/2008 <BR>
* \b WAS_OWNER: Hugh Malan    20/02/2008 <BR>
*
* (c) 2008 Realtime Worlds Ltd.
****************************************************************************************/

#include "Common.usf"
#include "PostProcessCommon.usf"
#include "DepthOfFieldCommon.usf"
#include "_Settings.usf" // Custom settings file

sampler2D BlurredImage;

#if SEPARATE_BLOOM
sampler2D BlurredImageSeperateBloom;
#endif
// Tone-mapping parameters.
sampler2D AdaptedLuminance;
float MiddleGrey;
float Lwhite;
//fix multicreation of same variable
float fAdaptedLuminance;
float Lworld;
float Exposure;
float Ladapted;
float Ldisplay;
#if RTW_ON
half4 rawColor;
float3 filteredColor;
float4 sceneColor;
float3 BloomResult;
#else
#endif

// Colour adjustment parameters.
float Brightness;
float Contrast;
float Saturation;
float3 DesaturatedColour;

#if USE_COLORGRADING
sampler2D ColorGradingLUT;
#endif

#if RTW_ON
	half BloomPostScale;
	static const half3 LuminanceVector = LUMINANCE_V_RTW;
#else
	static const half3 LuminanceVector = LUMINANCE_V;
#endif

	// Calculate DOF and bloom for the pixel. // not used for RTW_ON
	float3 ApplyDOFAndBloom(half4 FocusedSceneColorAndDepth, float2 UV)
	{
	#if SEPARATE_BLOOM
		#if SET_BLOOM_KYOUKI
			half4 DOFColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage,UV);
			half CoC = 0.0; //CalcBackgroundUnfocusedPercent(FocusedSceneColorAndDepth.a) * 0.0;	
			half3 Result = lerp(FocusedSceneColorAndDepth.rgb, DOFColorAndWeight.rgb, CoC);		
		#else
			// Sample DoF colour and blurred foreground circle of confusion.
			half4 DOFColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage,UV);
			half UnblurredForegroundCoC = CalcForegroundUnfocusedPercent(FocusedSceneColorAndDepth.a);
			half BlurredForegroundCoC = DOFColorAndWeight.a;
			// Combine blurred and unblurred CoC to get max area CoC.
			half ForegroundCoC = saturate(2 * max(UnblurredForegroundCoC, BlurredForegroundCoC) - UnblurredForegroundCoC);
			// Combine foreground and background.
			half CoC = max(ForegroundCoC, CalcBackgroundUnfocusedPercent(FocusedSceneColorAndDepth.a));
			// Lerp between blurred and unblurred based on CoC.
			half3 Result = lerp(FocusedSceneColorAndDepth.rgb, DOFColorAndWeight.rgb, CoC);
			// Add in bloom contribution.
		#endif
		Result += MAX_SCENE_COLOR * tex2D(BlurredImageSeperateBloom, UV).rgb;
		return Result;
	#else
		half FocusedWeight = saturate(1 - CalcUnfocusedPercent(FocusedSceneColorAndDepth.a));
		//Scale color back up as it was compressed to the [0-1] range to fit in the fixed point filter buffer
		half4 UnfocusedSceneColorAndWeight = MAX_SCENE_COLOR * tex2D(BlurredImage, UV);
		half  WeightSum = max(FocusedWeight + saturate(UnfocusedSceneColorAndWeight.a), 0.001);
		float3 BloomResult = (FocusedSceneColorAndDepth.rgb * FocusedWeight + UnfocusedSceneColorAndWeight.rgb) / WeightSum;
		return BloomResult;
	#endif
	}

half3 ToneMap(float3 WorldColour)
{


	#if RTW_ON
		//redesign abit
		fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
		Lworld = dot(WorldColour, LuminanceVector);
		Ladapted = (MiddleGrey / (fAdaptedLuminance + 0.1f)) * Lworld; // changed from 0.0001 to 0.1
		Ldisplay = (Ladapted * (1 + Ladapted / (Lwhite * Lwhite))) / (1.0f + Ladapted);
		return WorldColour * Ldisplay / (Lworld + 0.001); // changed from 0.0001 to 0.001
	#else 
		#if DOPE_ON
			fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
			Lworld = dot(WorldColour, LuminanceVector);
			Exposure = MiddleGrey / (fAdaptedLuminance + 0.2f);
			Ladapted = Lworld * Exposure;
			Ldisplay = (Ladapted * (1.4 + Ladapted / (Lwhite * Lwhite))) / (1.0f + Ladapted);
			return WorldColour * Ldisplay / (Lworld + 0.0016);
		#else
			fAdaptedLuminance = tex2D(AdaptedLuminance, float2(0.5f, 0.5f)).r;
			Lworld = dot(WorldColour, LuminanceVector);
			Exposure = MiddleGrey / (fAdaptedLuminance + 0.001f);
			Ladapted = Lworld * Exposure;
			Ldisplay = (Ladapted * (1 + Ladapted / (Lwhite * Lwhite))) / (1.0f + Ladapted);
			return WorldColour * Ldisplay / (Lworld + 0.0001);
		#endif
	#endif
}

half3 ColourAdjust(half3 InColour)
{
		// Saturate before we do anything to prevent whackiness from values outside [0,1]
	InColour = saturate(InColour);
		// (De)saturate.
	InColour = lerp(dot(InColour, LuminanceVector) * DesaturatedColour, InColour, Saturation);
		// Contrast adjustment (cubic) + Brightness adjustment (addition).
	InColour = (InColour - Contrast * (InColour - 1) * InColour * (InColour - 0.5)) + Brightness;
	return InColour;
} // propably abit faster cuz no variable creation and less write to variable

void Main(
	in float2 UV : TEXCOORD0,
	in float2 SceneUV : TEXCOORD1,
	out float4 OutColor : COLOR0
	)
{
	// RTW SHADING FINALLY - made by TheMaoci
	#if RTW_ON
		rawColor = MAX_SCENE_COLOR * tex2D(BlurredImage,UV);
		sceneColor = tex2D(SceneColorTexture,SceneUV);
		BloomResult = 1-saturate(1-lerp(sceneColor.rgb, 0, 0));
		half3 AdjustedColour = ColourAdjust(ToneMap(BloomResult));
		OutColor = float4(AdjustedColour, sceneColor.a);
	//** oryginal below
		//rawColor = tex2D(BlurredImage,UV);
		//filteredColor = MAX_SCENE_COLOR * rawColor.rgb * BloomPostScale;
		//sceneColor=tex2D(SceneColorTexture,SceneUV);
		//BloomResult = 1-(saturate(1-(filteredColor.rgb*RTW_BLOOM_ALPHA))*saturate(1-lerp(sceneColor.rgb, 0, RTW_BLOOM_ALPHA*saturate(rawColor.a*RTW_BLOOM_MULTI))));
		
		//half3 ToneMappedColour = ToneMap(BloomResult); // for test
		//half3 AdjustedColour = ColourAdjust(ToneMap(BloomResult));
		//OutColor = float4(AdjustedColour, sceneColor.a); 
	#else
		half4 FocusedSceneColorAndDepth = CalcSceneColorAndDepth(SceneUV);
			// Apply depth of field and bloom.
		float3 DOFBloomResult = ApplyDOFAndBloom(FocusedSceneColorAndDepth, UV);
			// SJT: Tone map the HDR colour.
		half3 ToneMappedColour = ToneMap(DOFBloomResult);
		#if USE_COLORGRADING
			half3 AdjustedColour = ColorLookupTable(ColorGradingLUT, ToneMappedColour);
		#else
				// SJT: Perform colour adjustment.
			half3 AdjustedColour = ColourAdjust(ToneMappedColour);
		#endif
			// Gamma correction.
			// DISABLED: This wasn't used when the UI is shown (i.e. most of the time!),
			// and costs a big chunk of time, so I've disabled it.
			/*	half3 LinearColor = AdjustedColour * GammaColorScale + GammaOverlayColor;
				OutColor = float4(pow(saturate(LinearColor), GammaInverse), FocusedSceneColorAndDepth.a);*/
		OutColor = float4(AdjustedColour, FocusedSceneColorAndDepth.a);
	#endif
	// CROSSHAIR AND OUTLINE BELOW - delete if not used
	#if SET_CROSSHAIR
		#include "Crosshair.usf"
	#else
	#endif
	//uncomment to enable
	//#if SET_OUTLINE
	//	#include "OutlinePixelShader.usf"
	//#else
	//#endif
	
}