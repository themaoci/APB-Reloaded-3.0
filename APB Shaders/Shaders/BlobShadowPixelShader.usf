/***************************************************************************************/
/*! \file BlobShadowPixelShader.usf
*
* \brief Pixel shader for the blob shadow rendering pass.
*
* \b NOW_OWNER: SJT    20/11/2007 <BR>
*
* (c) 2007 Real Time Worlds Ltd.
****************************************************************************************/

#include "Common.usf"

float4x4 ScreenToLocal;

// Texture that defines the shape of the shadow.
sampler2D ShadowTexture;

// Fade factor (for fading out at a distance).
float fFadeFactor;

// Entry point
void Main(
	float4 ScreenVector : TEXCOORD0,
	float4 ScreenPosition : TEXCOORD1,
	out float4 OutColor : COLOR0
	)
{
// APB - DF +
	// Changed return value into float to avoid percision problems on old cards
	float	SceneDepth = PreviousDepth(ScreenPosition);

	// Clip distant pixels to avoid artifacts
	clip( 10000 - SceneDepth );
// APB - DF -

	// calculate the local-space position using the deprojected screen vector by multiplying with scene w
	float3	LocalPosition = MulMatrix(ScreenToLocal, float4(ScreenPosition.xy / ScreenPosition.w * SceneDepth, SceneDepth, 1)).xyz;

	// Don't render pixels outside the box.
	clip(LocalPosition);
	clip(1 - LocalPosition);

	// Sample the shadow texture.
	float ShadowValue = tex2D(ShadowTexture, LocalPosition.xy).g;

	// Values defining where the "sweet spot" of maximum shadowing lies.
	// The values are relative to the size of the box, measuring from the bottom.
	const float peak1 = 0.85;
	const float peak2 = 0.95;

	// Fade off based on z value.
	float zFalloff = min(LocalPosition.z / peak1,
					   (LocalPosition.z - 1) / (peak2 - 1));

	// Clamp z falloff to 1.
	zFalloff = min(zFalloff, 1);

	ShadowValue *= zFalloff;

	// Modulate with face factor.
	ShadowValue *= fFadeFactor;

	// Invert shadow value (for modulative blending).
	// RETURN_COLOR not needed with modulative blending
	OutColor = float4( (1 - ShadowValue).rrr, ScreenPosition.w * ALPHA_DEPTH_SCALE_FACTOR/*SceneDepth*/ );
}
