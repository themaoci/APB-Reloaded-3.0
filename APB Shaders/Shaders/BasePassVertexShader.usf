/*=============================================================================
	BasePassVertexShader.hlsl: Base pass vertex shader
	Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

// APB - SJT: MODIFIED: We also need lightmap coordinates for AO. +
#define NEEDS_LIGHTMAP_COORDINATE	(TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP || TEXTURE_AOMAP)
// APB - SJT -

#define NEEDS_VERTEX_LIGHTMAP			VERTEX_LIGHTMAP
#define NEEDS_SIMPLE_VERTEX_LIGHTMAP	SIMPLE_VERTEX_LIGHTMAP

// SH lighting requires a TangentBasisInverse matrix.
#if ENABLE_SH_LIGHT
	#undef WORLD_COORDS
	#define WORLD_COORDS 1
#endif

// APB(SJT): Don't use basepass fogging with world-coords, as there aren't enough interpolators. +
#define NEEDS_BASEPASS_FOGGING		((MATERIALBLENDING_TRANSLUCENT || MATERIALBLENDING_ADDITIVE) && !WORLD_COORDS)
// APB(SJT) -

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

#if NEEDS_BASEPASS_FOGGING
#include "HeightFogCommon.usf"
#include "FogVolumeCommon.usf"
#endif

/**
 * Scale factors for the light-map coefficients.
 * The light-map scale array is a set of float4s so it can be set as a contiguous chunk regardless of platform shader constant alignment.
 */
float4 LightMapScale[NUM_LIGHTMAP_COEFFICIENTS];

// APB(SJT) +
// For single lightmapping, this is the level of the only lightmap.
// For dual lightmapping, it is the level of the secondary lightmap
// (the level of the primary lightmap does not change when double lightmapping).
float fLightMapLevel;

//  Scale for the secondary lightmap.
//#if DOUBLE_LIGHTMAP
//float3 LightMap2Scale[NUM_LIGHTMAP_COEFFICIENTS];
//#endif
// APB(SJT) -

// APB(SJT): Variable skylight vector. +
#if !MATERIAL_LIGHTINGMODEL_UNLIT
	float3 WorldSpaceSkyVector;
#endif
// APB(SJT) -

// APB(SJT): Lit base pass +
float3 DirectionalLightDirection;
// APB(SJT) -

// APB(SJT): Disable all fog stuff when we don't want it. +
#if NEEDS_BASEPASS_FOGGING
// APB(SJT) -

/** Intersecting fog volume color */
half3 ApproxFogColor;

/** Minimum extrema of the AABB of the intersecting fog volume */
float3 FogVolumeBoxMin;

/** Maximum extrema of the AABB of the intersecting fog volume */
float3 FogVolumeBoxMax;

/*
* Combines height fog and fog volume contribution.  Height fog is always applied after the fog volume 
* since height fog is infinite in extent and fog volumes are bounded.
*/
half4 GetCombinedFog(half4 HeightFogContribution,half4 FogVolumeContribution)
{
	//filter fog volume color as if it were coming through the height fog, and add in the emitted color from height fog
	//alpha stores the amount of original scene color to be transmitted, which is attenuated by both fog factors
	return half4(
		FogVolumeContribution.rgb * HeightFogContribution.a + HeightFogContribution.rgb,
		FogVolumeContribution.a * HeightFogContribution.a
		);
}

/** Computes fogging contribution for a given line integral. */
half4 ComputeFogContribution(float LineIntegral)
{
	//find the fog volume factor by evaluating the transmittance function
	half FogVolumeFactor = exp2(-LineIntegral);
	//weight fog volume color by 1 - fog volume factor
	half3 FogVolumeColor = (1.0f - FogVolumeFactor) * ApproxFogColor;

	return half4(FogVolumeColor,FogVolumeFactor);
}

#if FOGVOLUMEDENSITY_NONE
	/** Computes fog contribution from no fog volume. */
	half4 GetFogDensity(float4 WorldPosition)
	{
		return half4(0,0,0,1);
	}
#endif

#if FOGVOLUMEDENSITY_CONSTANT
	/**
	 * Computes fog contribution for a constant density fog volume.
	 * The fog volume contribution is clipped by the AABB of the fog volume.
	 */
	half4 GetFogDensity(float4 WorldPosition)
	{
		//clip the ray from the vertex to the camera by the AABB of the fog volume 
		float2 BoxIntersections = RayBoxIntersect(WorldPosition.xyz, CameraPosition.xyz, FogVolumeBoxMin, FogVolumeBoxMax); 
		//get the fog volume line integral
		half LineIntegral = ConstantDensityLineIntegral(WorldPosition.xyz, CameraPosition.xyz, BoxIntersections);
		// Compute the fog volume contribution from the integral.
		return ComputeFogContribution(LineIntegral);
	}
#endif

#if FOGVOLUMEDENSITY_LINEARHALFSPACE
	/**
	 * Computes fog contribution for a linear halfspace density fog volume.
	 * The fog volume contribution is clipped by the AABB of the fog volume.
	 */
	half4 GetFogDensity(float4 WorldPosition)
	{
		//clip the ray from the vertex to the camera by the AABB of the fog volume 
		float2 BoxIntersections = RayBoxIntersect(WorldPosition.xyz, CameraPosition.xyz, FogVolumeBoxMin, FogVolumeBoxMax); 
		//get the fog volume line integral
		half LineIntegral = LinearHalfspaceLineIntegral(WorldPosition.xyz, CameraPosition.xyz, BoxIntersections);
		// Compute the fog volume contribution from the integral.
		return ComputeFogContribution(LineIntegral);
	}
#endif

#if FOGVOLUMEDENSITY_SPHEREDENSITY
	/**
	 * Computes fog contribution for a spherical density fog volume.
	 */
	half4 GetFogDensity(float4 WorldPosition)
	{
		//get the fog volume line integral
		half LineIntegral = SphericalLineIntegral(WorldPosition.xyz, CameraPosition.xyz);
		// Compute the fog volume contribution from the integral.
		return ComputeFogContribution(LineIntegral);
	}
#endif

#if FOGVOLUMEDENSITY_CONEDENSITY
	/**
	 * Computes fog contribution for a spherical density fog volume.
	 */
	half4 GetFogDensity(float4 WorldPosition)
	{
		// Cone fog integral isn't implemented for translucency!
		half LineIntegral = 0;
		// Compute the fog volume contribution from the integral.
		return ComputeFogContribution(LineIntegral);
	}
#endif

// APB(SJT) +
#endif	// NEEDS_BASEPASS_FOGGING
// APB(SJT) -

/** Entry point for the base pass vertex shader. */
void Main(
	FVertexFactoryInput Input,
	out FVertexFactoryInterpolants FactoryInterpolants,

	#if NEEDS_VERTEX_LIGHTMAP
		out float4 LightMapA_FogR	: TEXCOORD2,
		out float4 LightMapB_FogG	: TEXCOORD3,
		out float4 LightMapC_FogB	: TEXCOORD4,
	#else
		#if SIMPLE_VERTEX_LIGHTMAP
			out float3 LightMapA		: TEXCOORD2,
		#endif
// APB(SJT): Moved outside the VERTEX_LIGHTMAP conditional +
//		#if NEEDS_BASEPASS_FOGGING
//			out float4 VertexFog		: TEXCOORD4,
//		#endif
// APB(SJT) -

// APB(SJT): Lit base pass +
		#if !MATERIAL_LIGHTINGMODEL_UNLIT
			out float4 OutTangentDirectionalLightVector_VertexShadowMap	: TEXCOORD4,
		#endif
// APB(SJT) -
	#endif

// APB(SJT): Fog is no-longer dependent on VERTEX_LIGHTMAP, so I've moved it down here. +
	#if NEEDS_BASEPASS_FOGGING
		// Use COLOR0 for the fog (note: not free when using world-coords)
		out float4 VertexFog		: COLOR0,
	#endif
// APB(SJT) -

	out float4 PixelPosition	: TEXCOORD5,
	out float4 CameraVector_FogA: TEXCOORD6,
#if !MATERIAL_LIGHTINGMODEL_UNLIT
	out float3 SkyVector		: TEXCOORD7,
#endif
	out float4 Position : POSITION
	)
{
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input);
	Position = MulMatrix(ViewProjectionMatrix,WorldPosition);
	FactoryInterpolants = VertexFactoryGetInterpolants(Input);
#if WORLD_POS
	PixelPosition = WorldPosition;
#else
	PixelPosition = Position;
#endif

	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input);
	CameraVector_FogA.xyz = VertexFactoryWorldToTangentSpace(Input,TangentBasis,CameraPosition.xyz - WorldPosition.xyz * CameraPosition.w);

	#if !MATERIAL_LIGHTINGMODEL_UNLIT
		// Calculate sky vector
// APB(SJT): Use vector from the parameter rather than the hard coded value. +
		SkyVector = VertexFactoryWorldToTangentSpace(Input,TangentBasis,WorldSpaceSkyVector);
// APB(SJT) -
	#endif

	CameraVector_FogA.w = 0;

	// Calculate the fog needed for translucency
	#if NEEDS_VERTEX_LIGHTMAP
		LightMapA_FogR.w = 0;
		LightMapB_FogG.w = 0;
		LightMapC_FogB.w = 0;
	#endif

	#if NEEDS_BASEPASS_FOGGING
		float4 Fog = GetCombinedFog(
			CalculateVertexHeightFog(WorldPosition.xyz, CameraPosition),
			GetFogDensity(WorldPosition)
			);

// APB(SJT): Vertex fog always has its own interpolant now. +
		VertexFog = Fog;
// APB(SJT) -
	#endif

	#if NEEDS_VERTEX_LIGHTMAP
		float4 InLightMapA;
		float4 InLightMapB;
		float4 InLightMapC;
		VertexFactoryGetVertexLightMap(Input,InLightMapA,InLightMapB,InLightMapC);

		LightMapA_FogR.xyz = pow( InLightMapA FCOLOR_COMPONENT_SWIZZLE .rgb, 2.2 ) * LightMapScale[0].rgb;
		LightMapB_FogG.xyz = pow( InLightMapB FCOLOR_COMPONENT_SWIZZLE .rgb, 2.2 ) * LightMapScale[1].rgb;
		LightMapC_FogB.xyz = pow( InLightMapC FCOLOR_COMPONENT_SWIZZLE .rgb, 2.2 ) * LightMapScale[2].rgb;

// APB - SJT +
		#if !DOUBLE_LIGHTMAP
			float3 LightMapScaleFactor = float3(fLightMapLevel, fLightMapLevel, fLightMapLevel);
		#else
			// Compute required lightmap level based on night factor and time of day.
			float3 NightFactor = VertexFactoryGetVertexNightFactor(Input);
			float3 LightMapScaleFactor = ((1 - NightFactor) + NightFactor * fLightMapLevel);
		#endif

		LightMapA_FogR.xyz *= LightMapScaleFactor;
		LightMapB_FogG.xyz *= LightMapScaleFactor;
		LightMapC_FogB.xyz *= LightMapScaleFactor;
// APB - SJT -

	#elif SIMPLE_VERTEX_LIGHTMAP
		float4 InLightMapA;
		VertexFactoryGetSimpleVertexLightMap(Input,InLightMapA);

		LightMapA = pow( InLightMapA FCOLOR_COMPONENT_SWIZZLE .rgb, 2.2 ) * LightMapScale[0].rgb;

// APB - SJT +
		#if !DOUBLE_LIGHTMAP
			float3 LightMapScaleFactor = float3(fLightMapLevel, fLightMapLevel, fLightMapLevel);
		#else
			float3 NightFactor = VertexFactoryGetVertexNightFactor(Input);
			float3 LightMapScaleFactor = ((1 - NightFactor) + NightFactor * fLightMapLevel);
		#endif

		LightMapA *= LightMapScaleFactor;
// APB - SJT -
	#endif
// APB(SJT): Lit base pass. +
	#if !MATERIAL_LIGHTINGMODEL_UNLIT
		// Compute tangent-space light vector.
		float3 TangentDirectionalLightVector = VertexFactoryWorldToTangentSpace(Input,TangentBasis,DirectionalLightDirection);

		#if !NEEDS_VERTEX_LIGHTMAP
			OutTangentDirectionalLightVector_VertexShadowMap.xyz = TangentDirectionalLightVector;

			#if VERTEX_AOMAP
				OutTangentDirectionalLightVector_VertexShadowMap.w = VertexFactoryGetVertexShadowMap(Input);
			#else
				OutTangentDirectionalLightVector_VertexShadowMap.w = 1;
			#endif
		#else
			// Pack light vector into light map alpha channels.
			LightMapA_FogR.w = TangentDirectionalLightVector.r;
			LightMapB_FogG.w = TangentDirectionalLightVector.g;
			LightMapC_FogB.w = TangentDirectionalLightVector.b;

			CameraVector_FogA.w = VertexFactoryGetVertexShadowMap(Input);
		#endif
	#endif
// APB(SJT) -
}
