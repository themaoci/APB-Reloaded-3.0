/***************************************************************************************/
/*! \file ParticleDecalPixelShader.usf
*
* \brief Pixel shader for the fake decal particles.
*
* \b NOW_OWNER: DW    24/10/2008 <BR>
*
* (c) 2008 Real Time Worlds Ltd.
****************************************************************************************/

#include "Common.usf"

float4x4 ScreenToLocal;
float4x4 LocalToScreen;

// Texture that defines the shape of the shadow.
sampler2D DecalTexture;
//samplerCUBE SphereTexture;
sampler2D PointNoiseTexture;

// Fade factor (for fading out at a distance).
float FadeFactor = 1;

const int ConicProjection = 1;
float2 BaseScreenResolution = float2(800.0, 600.0);
float2 PointNoiseResolution = float2(256.0,256.0);

#define PDP_Box (0)
#define PDP_Cone (1)
#define PDP_Sphere (2)

//int PDP_Projection = PDP_Box;
#define PDP_Projection (PDP_Cone)

/*
#define PDM_Modulate (0)
#define PDM_ModulatePlusOne (1)
#define PDM_Add (2)

// const int PDM_BlendMode = PDM_ModulatePlusOne;
#define PDM_BlendMode (PDM_ModulatePlusOne)*/

float FinalOutputScale = 1;
float FinalOutputBias = 0;

half sceneDepth( float2 screen ) {
	return CalcSceneDepth(screen * ScreenPositionScaleBias.xy + ScreenPositionScaleBias.wz);
}

float3 screenToLocalPosition( float2 screen, float depth ) {
	return MulMatrix(ScreenToLocal, float4(screen.xy * depth, depth, 1)).xyz;
}

float3 positionAt( float2 screen ) {
	half depth = sceneDepth(screen);
	float3 p = screenToLocalPosition( screen, depth );	
	return p;
}

// Entry point
void Main(
	float4 ScreenVector : TEXCOORD0,
	float4 ScreenPosition : TEXCOORD1,
	out float4 OutColor : COLOR0
	)
{
	//disabling due to crashing editor... need to stop it trying to compile SM2 version
#if 1

	float2 screen = ScreenPosition.xy / ScreenPosition.w;

	float3 localPosition = positionAt( screen );
	float3 localNormal = float3(0,0,1);

	/*
	float4 noise = tex2D( PointNoiseTexture, screen * float2(800.0,600.0)/float2(256,256) ) - 0.5;

	//blargh!	
	float2 offs = noise.xy / float2(800.0, 600.0);
	float2 r = 1.5 ;
	float2 delta = r / float2( 800.0, 600.0 );
	
	float2 dx = float2( delta.x, 0.0 );
	float2 dy = float2( 0.0, delta.y );		
	float3 lx = positionAt( screen + offs + dx );
	float3 ly = positionAt( screen + offs + dy );

	float3 p = positionAt( screen + offs );
	localNormal = normalize( cross(lx-p,ly-p) );
	// localNormal = normalize( localNormal + noise.xyz * 0.1 );
	//blargh!

	// localNormal.xy += 0.3 * noise.xyz;
	// localNormal = normalize(localNormal);
	
	*/

	// Don't render pixels outside the box.
	localPosition.z -= 1.0; //offset because box is now [-0.5 .. 0.5] in z
	clip(localPosition);
	clip(1 - localPosition);

	float4 colour = 0;

	if( PDP_Projection == PDP_Box ) {//ConicProjection == 0 ) {		
		float2 t = localPosition.xy ; //testing with a 2x2 sub-texture
		colour = tex2D(DecalTexture, t);
		// Modulate with fade factor.
		colour *= FadeFactor;
	} else if( PDP_Projection == PDP_Cone ){
		float scaleMax = 0.01;
		float zScale = scaleMax + localPosition.z * (1.0 - scaleMax);
		float2 t = localPosition.xy - ( 0.5 * (1.0 - scaleMax) * (1.0-localPosition.z));

		t = t / zScale;
		clip(t);
		clip(1-t);
		colour = tex2D( DecalTexture, saturate(t) );			
		//fade at extreeeemes of box
		float fadeOut = saturate( 1.0 - localPosition.z );
		float fadeIn =  saturate( localPosition.z * 50.0 );
		colour *= fadeOut * fadeOut * fadeOut * fadeIn * 1.0;
		//fake lighting
		
		float3 l = normalize( localPosition - float3(0.5,0.5,0.0) );
		float lamb = saturate( dot(localNormal, l) + 0.05);
		colour *= lamb;
		

		//fade based on last render time/distance
		colour *= FadeFactor;
	} else if( PDP_Projection == PDP_Sphere ) {
		colour = float4( 0, 1, 1, 1 ); //texCUBE( DecalTexture, localPosition - float3(0,0,0.5) );
	} else {
		colour = float4( 1, 1, 0, 1 );
	}

	colour *= FinalOutputScale;
	colour += FinalOutputBias;

	OutColor = float4( colour.xyz , ScreenPosition.w * ALPHA_DEPTH_SCALE_FACTOR );
#else
	OutColor = float4( 0, 0, 0, ScreenPosition.w * ALPHA_DEPTH_SCALE_FACTOR );
#endif
}
