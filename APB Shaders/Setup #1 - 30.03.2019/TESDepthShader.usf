/***************************************************************************************
 * TESDepthShader.usf
 * ------------------
 *
 * Shader that performs the depth rendering pass 
 *
 * OWNER: Maurizio Sciglio 27/01/2006
 *
 * ---Amendments-----
 *
 * (c) 2006 Real Time Worlds, Ltd.
 ****************************************************************************************/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

// APB - DF +
sampler		MaskTexture;
float		MaskBias;
float		MaskInvert;	// 1-Inverted, 0-Normal
// APB - DF -

struct vertexShaderOutput
{
	FVertexFactoryInterpolants  OutFactoryInterpolants;
	float						Depth			: TEXCOORD5;	
	float4						Position		: POSITION;		
};

vertexShaderOutput vertexShader(FVertexFactoryInput Input)
{
	vertexShaderOutput Result;	
	
	Result.Position = MulMatrix(ViewProjectionMatrix,VertexFactoryGetWorldPosition(Input));
	Result.OutFactoryInterpolants = VertexFactoryGetInterpolants(Input);
	Result.Depth = Result.Position.z / Result.Position.w;
	
	return Result;
}

float4 pixelShader(FVertexFactoryInterpolants FactoryInterpolants,
				   float Depth : TEXCOORD5) : COLOR0
{
// APB - DF +
	// Check if the pixel belongs to the are we want to project upon. If not cull it.
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);
	
	// Fix for APB-44198 and APB-24764
	// Red channel - part mask; Green channel - area mask.
	float2 maskValue = tex2D(MaskTexture,MaterialParameters.TexCoords[0]).rg;
	maskValue.x = MaskInvert > 0.0 ? (1.0-maskValue.x)*maskValue.y : maskValue.x;
	
	clip( maskValue.x - MaskBias );
// APB - DF -

	return Depth;
}